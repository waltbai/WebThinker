[
    {
        "id": 1,
        "task_id": "17b5a6a3-bc87-42e8-b0fb-6ab0781ef2cc",
        "Question": "I’m researching species that became invasive after people who kept them as pets released them. There’s a certain species of fish that was popularized as a pet by being the main character of the movie Finding Nemo. According to the USGS, where was this fish found as a nonnative species, before the year 2020? I need the answer formatted as the five-digit zip codes of the places the species was found, separated by commas if there is more than one place.",
        "answer": "34689",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “finding nemo main character”.\n2. Note the results, which state that the main character is a clownfish.\n3. Search the web for “usgs nonnative species database”.\n4. Click result for the Nonindigenous Aquatic Species site.\n5. Click “Marine Fishes”.\n6. Click “Species List of Nonindigenous Marine Fish”.\n7. Scroll through the list until I find the clown anenomefish, and click “Collection info”.\n8. Note the place that a clown anenomefish was found, in Fred Howard Park at the Gulf of Mexico.\n9. Search the web for “fred howard park florida zip code”.\n10. Note the zip code, 34689. Since only one clownfish was found before the year 2020, this is the answer.",
            "Number of steps": "10",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 2,
        "task_id": "04a04a9b-226c-43fd-b319-d5e89743676f",
        "Question": "If we assume all articles published by Nature in 2020 (articles, only, not book reviews/columns, etc) relied on statistical significance to justify their findings and they on average came to a p-value of 0.04, how many papers would be incorrect as to their claims of statistical significance? Round the value up to the next integer.",
        "answer": "41",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Find how many articles were published in Nature in 2020 by Googling \"articles submitted to nature 2020\"\n2. Click through to Nature's archive for 2020 and filter the results to only provide articles, not other types of publications: 1002\n3. Find 4% of 1002 and round up: 40.08 > 41",
            "Number of steps": "3",
            "How long did this take?": "5 minutes",
            "Tools": "1. search engine\n2. calculator",
            "Number of tools": "2"
        }
    },
    {
        "id": 3,
        "task_id": "14569e28-c88c-43e4-8c32-097d35b9a67d",
        "Question": "In Unlambda, what exact charcter or text needs to be added to correct the following code to output \"For penguins\"? If what is needed is a character, answer with the name of the character. If there are different names for the character, use the shortest. The text location is not needed. Code:\n\n`r```````````.F.o.r. .p.e.n.g.u.i.n.si",
        "answer": "backtick",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Unlambda syntax\" online (optional).\n2. Opened https://en.wikipedia.org/wiki/Unlambda.\n3. Note that the hello world program is very similar in syntax to the code in this question.\n4. Go to the source referenced by the hello world program.\n5. From the referenced source, read what the components of the program do to understand that each period needs a backtick after the initial `r.\n6. Observe that in the given code, there are 12 periods but only 11 backticks after the initial `r, so the missing character is a backtick.",
            "Number of steps": "6",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Unlambda compiler (optional)",
            "Number of tools": "3"
        }
    },
    {
        "id": 4,
        "task_id": "e1fc63a2-da7a-432f-be78-7c4a95598703",
        "Question": "If Eliud Kipchoge could maintain his record-making marathon pace indefinitely, how many thousand hours would it take him to run the distance between the Earth and the Moon its closest approach? Please use the minimum perigee value on the Wikipedia page for the Moon when carrying out your calculation. Round your result to the nearest 1000 hours and do not use any comma separators if necessary.",
        "answer": "17",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Googled Eliud Kipchoge marathon pace to find 4min 37sec/mile\n2. Converted into fractions of hours.\n3. Found moon periapsis in miles (225,623 miles).\n4. Multiplied the two to find the number of hours and rounded to the nearest 100 hours.",
            "Number of steps": "4",
            "How long did this take?": "20 Minutes",
            "Tools": "1. A web browser.\n2. A search engine.\n3. A calculator.",
            "Number of tools": "3"
        }
    },
    {
        "id": 6,
        "task_id": "8e867cd7-cff9-4e6c-867a-ff5ddc2550be",
        "Question": "How many studio albums were published by Mercedes Sosa between 2000 and 2009 (included)? You can use the latest 2022 version of english wikipedia.",
        "answer": "3",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. I did a search for Mercedes Sosa\n2. I went to the Wikipedia page for her\n3. I scrolled down to \"Studio albums\"\n4. I counted the ones between 2000 and 2009",
            "Number of steps": "4",
            "How long did this take?": "5 minutes",
            "Tools": "1. web browser\n2. google search",
            "Number of tools": "2"
        }
    },
    {
        "id": 7,
        "task_id": "3627a8be-a77f-41bb-b807-7e1bd4c0ebdf",
        "Question": "The object in the British Museum's collection with a museum number of 2012,5015.17 is the shell of a particular mollusk species. According to the abstract of a research article published in Science Advances in 2021, beads made from the shells of this species were found that are at least how many thousands of years old?",
        "answer": "142",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Use search engine to search for \"British Museum search collection\" and navigate to the British Museum's collection search webpage.\n2. Select \"Museum number\" as search field and \"2012,5015.17\" in text box, then run search.\n3. Open the page for the single result and note that the description says that this is the shell of an individual of the Nassa gibbosula species.\n4. Use search engine to search for \"Nassa gibbosula\".\n5. Note that according to the search result from the World Register of Marine Species website, Nassa gibbosula is not an accepted species name.\n6. Open the page for Nassa gibbosula on the World Register of Marine Species website.\n7. Scan the page and note that the accepted species name is Tritia gibbosula.\n8. Use search engine to search for \"Science Advances 2021 Tritia gibbosula\".\n9. Find that the top result is an article from 2021 in Science Advances titled \"Early Middle Stone Age personal ornaments from Bizmoune Cave, Essaouira, Morocco\".\n10. Scan abstract and note that the article discusses beads made from Tritia gibbosula shells that date to at least 142 thousand years ago, giving a final answer of 142.",
            "Number of steps": "10",
            "How long did this take?": "12 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 8,
        "task_id": "7619a514-5fa8-43ef-9143-83b66a43d7a4",
        "Question": "According to github, when was Regression added to the oldest closed numpy.polynomial issue that has the Regression label in MM/DD/YY?",
        "answer": "04/15/18",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"numpy github\" on Google search.\n2. Opened the NumPy GitHub page.\n3. Clicked \"Issues\" in the repo tabs.\n4. Clicked \"Closed\" on the filter bar.\n5. Set the filter to the \"numpy.polynomial\" label.\n6. Set the filter to the \"06 - Regression\" label.\n7. Opened the oldest Regression post.\n8. Scrolled down to find when the Regression label was added (Apr 15, 2018).\n9. Converted to MM/DD/YY (04/15/18).",
            "Number of steps": "9",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 9,
        "task_id": "ec09fa32-d03f-4bf8-84b0-1f16922c3ae4",
        "Question": "Here's a fun riddle that I think you'll enjoy.\n\nYou have been selected to play the final round of the hit new game show \"Pick That Ping-Pong\". In this round, you will be competing for a large cash prize. Your job will be to pick one of several different numbered ping-pong balls, and then the game will commence. The host describes how the game works.\n\nA device consisting of a winding clear ramp and a series of pistons controls the outcome of the game. The ramp feeds balls onto a platform. The platform has room for three ping-pong balls at a time. The three balls on the platform are each aligned with one of three pistons. At each stage of the game, one of the three pistons will randomly fire, ejecting the ball it strikes. If the piston ejects the ball in the first position on the platform the balls in the second and third position on the platform each advance one space, and the next ball on the ramp advances to the third position. If the piston ejects the ball in the second position, the ball in the first position is released and rolls away, the ball in the third position advances two spaces to occupy the first position, and the next two balls on the ramp advance to occupy the second and third positions on the platform. If the piston ejects the ball in the third position, the ball in the first position is released and rolls away, the ball in the second position advances one space to occupy the first position, and the next two balls on the ramp advance to occupy the second and third positions on the platform.\n\nThe ramp begins with 100 numbered ping-pong balls, arranged in ascending order from 1 to 100. The host activates the machine and the first three balls, numbered 1, 2, and 3, advance to the platform. Before the random firing of the pistons begins, you are asked which of the 100 balls you would like to pick. If your pick is ejected by one of the pistons, you win the grand prize, $10,000.\n\nWhich ball should you choose to maximize your odds of winning the big prize? Please provide your answer as the number of the ball selected.",
        "answer": "3",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "Step 1: Evaluate the problem statement provided in my user's prompt\nStep 2: Consider the probability of any ball on the platform earning the prize.\nStep 3: Evaluate the ball in position one. The probability of it earning the prize, P1, is 1/3\nStep 4: Using a calculator, evaluate the ball in position two. The probability of it earning the prize, P2, is the difference between 1 and the product of the complementary probabilities for each trial\nP2 = 1 - (2/3)(2/3)\nP2 = 5/9\nStep 5: Using a calculator, evaluate the ball in position three. The probability of it earning the prize, P3, is the difference between 1 and the product of the complementary probabilities for each trial\nP3 = 1 - (2/3)(2/3)(2/3)\nP3 = 19/27\nStep 6: Consider the possible outcomes of numbers higher than 3.\nStep 7: For each trial, either 1 or 2 balls from the ramp will advance to the platform. For any given selection, there is a 50% chance that the ball advances to position 2 or position 3.\nStep 8: As position three holds the highest chance of earning the prize, select the only ball known to occupy position three with certainty, ball 3.\nStep 9: Report the correct answer to my user, \"3\"",
            "Number of steps": "9",
            "How long did this take?": "1 minute",
            "Tools": "None",
            "Number of tools": "0"
        }
    },
    {
        "id": 10,
        "task_id": "676e5e31-a554-4acc-9286-b60d90a92d26",
        "Question": "In July 2, 1959 United States standards for grades of processed fruits, vegetables, and certain other products listed as dehydrated, consider the items in the \"dried and dehydrated section\" specifically marked as dehydrated along with any items in the Frozen/Chilled section that contain the whole name of the item, but not if they're marked Chilled. As of August 2023, what is the percentage (to the nearest percent) of those standards that have been superseded by a new version since the date given in the 1959 standards?",
        "answer": "86",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"July 2, 1959 United States standards for grades of processed fruits, vegetables, and certain other products\" on Google.\n2. Opened https://upload.wikimedia.org/wikipedia/commons/0/06/United_States_standards_for_grades_of_processed_fruits%2C_vegetables%2C_and_certain_other_products_%28as_of_July_2%2C_1959%29_%28IA_unitedstatesstan14unit_4%29.pdf.\n3. Scrolled to the \"DRIED or DEHYDRATED\" section.\n4. Opened a new tab and searched \"united states standards for grades of dehydrated apples\".\n5. Opened https://www.ams.usda.gov/grades-standards/dehydrated-apples-grades-and-standards.\n6. Opened the \"U.S. Grade Standards for Dehydrated Apples (pdf)\" PDF.\n7. Checked the date against the 1959 standards.\n8. Repeated steps 4-7 for all dehydrated items in the \"DRIED or DEHYDRATED\" section:\n9. Grapefruit Juice, updated (running tally: 2/2)\n10. Orange Juice, updated (running tally: 3/3)\n11. Found all versions of the dehydrated items in Frozen or Chilled, except those marked Chilled: Apples; Grapefruit Juice, Concentrated; Grapefruit Juice and Orange Juice, Concentrated, Blended; Orange Juice, Concentrated\n12. Repeated steps 4-7 all those versions:\n13. Apples, not updated (running tally: 3/4)\n14. Grapefruit Juice, Concentrated, updated (running tally: 4/5)\n15. Grapefruit Juice and Orange Juice, Concentrated, Blended, updated (running tally: 5/6)\n16. Orange Juice, Concentrated, updated (running tally: 6/7)\n17. Calculated the percentage (6 / 7 * 100% = 85.7%).\n18. Rounded to the nearest percent (86%).",
            "Number of steps": "14",
            "How long did this take?": "20 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. PDF access\n4. Calculator",
            "Number of tools": "4"
        }
    },
    {
        "id": 12,
        "task_id": "2a649bb1-795f-4a01-b3be-9a01868dae73",
        "Question": "What are the EC numbers of the two most commonly used chemicals for the virus testing method in the paper about SPFMV and SPCSV in the Pearl Of Africa from 2016? Return the semicolon-separated numbers in the order of the alphabetized chemicals.",
        "answer": "3.1.3.1; 1.11.1.7",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Pearl of Africa\" on Google.\n2. Noted the answer from the results.\n3. Searched \"SPFMV and SPCSV in Uganda 2016 paper\" on Google.\n4. Opened \"Effects of Sweet Potato Feathery Mottle Virus and ...\" at https://onlinelibrary.wiley.com/doi/full/10.1111/jph.12451.\n5. Found the section on virus testing.\n6. Searched \"most commonly used chemicals for ELISA\" on Google.\n7. Noted horseradish peroxidase and alkaline phosphatase from the results.\n8. Searched \"horseradish peroxidase EC number\" on Google.\n9. Noted the answer from the featured text snippet (1.11.1.7).\n10. Searched \"alkaline phosphatase EC number\" on Google.\n11. Noted the answer from the featured text snippet (3.1.3.1).\n12. Alphabetized the chemicals.\n13. Put the numbers in the order of the chemicals.",
            "Number of steps": "13",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 13,
        "task_id": "87c610df-bef7-4932-b950-1d83ef4e282b",
        "Question": "In April of 1977, who was the Prime Minister of the first place mentioned by name in the Book of Esther (in the New International Version)?",
        "answer": "Morarji Desai",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “Book of Esther NIV”.\n2. Click search result to read the text of the first chapter.\n3. Note the first place named, India.\n4. Search the web for “prime ministers of India list”.\n5. Click Wikipedia result.\n6. Scroll down to find the prime minister during the specified timeframe, Morarji Desai.",
            "Number of steps": "6",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 15,
        "task_id": "dd3c7503-f62a-4bd0-9f67-1b63b94194cc",
        "Question": "Use density measures from the chemistry materials licensed by Marisa Alviar-Agnew & Henry Agnew under the CK-12 license in LibreText's Introductory Chemistry materials as compiled 08/21/2023.\n\nI have a gallon of honey and a gallon of mayonnaise at 25C. I remove one cup of honey at a time from the gallon of honey. How many times will I need to remove a cup to have the honey weigh less than the mayonaise? Assume the containers themselves weigh the same.",
        "answer": "6",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search \"LibreText density mayonnaise\"\n2. Click result, confirm the correct license.\n3. Search \"cm^3 to 1 cup\"\n4. Use results with density measures to form the equation (16*236.588)(1.420 - 0.910)/(236.588*1.420)\n5. Round up",
            "Number of steps": "5",
            "How long did this take?": "20 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 16,
        "task_id": "5d0080cb-90d7-4712-bc33-848150e917d3",
        "Question": "What was the volume in m^3 of the fish bag that was calculated in the University of Leicester paper \"Can Hiccup Supply Enough Fish to Maintain a Dragon’s Diet?\"",
        "answer": "0.1777",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched '\"Can Hiccup Supply Enough Fish to Maintain a Dragon’s Diet?\"' on Google.\n2. Opened \"Can Hiccup Supply Enough Fish to Maintain a Dragon’s Diet?\" at https://journals.le.ac.uk/ojs1/index.php/jist/article/view/733.\n3. Clicked \"PDF\".\n4. Found the calculations for the volume of the fish bag and noted them.",
            "Number of steps": "4",
            "How long did this take?": "5 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. PDF access",
            "Number of tools": "3"
        }
    },
    {
        "id": 19,
        "task_id": "46719c30-f4c3-4cad-be07-d5cb21eee6bb",
        "Question": "Of the authors (First M. Last) that worked on the paper \"Pie Menus or Linear Menus, Which Is Better?\" in 2015, what was the title of the first paper authored by the one that had authored prior papers?",
        "answer": "Mapping Human Oriented Information to Software Agents for Online Systems Usage",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Pie Menus or Linear Menus, Which Is Better?\" on Google.\n2. Opened \"Pie Menus or Linear Menus, Which Is Better?\" on https://oda.oslomet.no/oda-xmlui/handle/10642/3162.\n3. Clicked each author's name.\n4. Noted the name that had no other papers listed.\n5. Searched \"Murano, Pietro\" on Google.\n6. Opened http://www.pietromurano.org/.\n7. Clicked \"Publications\".\n8. Found the earliest paper he contributed to.",
            "Number of steps": "8",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 22,
        "task_id": "4b6bb5f7-f634-410e-815d-e673ab7f8632",
        "Question": "In Series 9, Episode 11 of Doctor Who, the Doctor is trapped inside an ever-shifting maze. What is this location called in the official script for the episode? Give the setting exactly as it appears in the first scene heading.",
        "answer": "THE CASTLE",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “Doctor Who series 9 episode 11 official script”.\n2. Click result on the BBC website.\n3. Scroll through the PDF to read the script, noting that it takes place in a mechanical castle location.\n4. Scroll back to the first scene heading to note the answer, THE CASTLE",
            "Number of steps": "4",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. PDF viewer",
            "Number of tools": "3"
        }
    },
    {
        "id": 23,
        "task_id": "f0f46385-fc03-4599-b5d3-f56496c3e69f",
        "Question": "In terms of geographical distance between capital cities, which 2 countries are the furthest from each other within the ASEAN bloc according to wikipedia? Answer using a comma separated list, ordering the countries by alphabetical order.",
        "answer": "Indonesia, Myanmar",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for \"ASEAN bloc\".\n2. Click the Wikipedia result for the ASEAN Free Trade Area.\n3. Scroll down to find the list of member states.\n4. Click into the Wikipedia pages for each member state, and note its capital.\n5. Search the web for the distance between the first two capitals. The results give travel distance, not geographic distance, which might affect the answer.\n6. Thinking it might be faster to judge the distance by looking at a map, search the web for \"ASEAN bloc\" and click into the images tab.\n7. View a map of the member countries. Since they're clustered together in an arrangement that's not very linear, it's difficult to judge distances by eye.\n8. Return to the Wikipedia page for each country. Click the GPS coordinates for each capital to get the coordinates in decimal notation.\n9. Place all these coordinates into a spreadsheet.\n10. Write formulas to calculate the distance between each capital.\n11. Write formula to get the largest distance value in the spreadsheet.\n12. Note which two capitals that value corresponds to: Jakarta and Naypyidaw.\n13. Return to the Wikipedia pages to see which countries those respective capitals belong to: Indonesia, Myanmar.",
            "Number of steps": "13",
            "How long did this take?": "45 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. Microsoft Excel / Google Sheets",
            "Number of tools": "3"
        }
    },
    {
        "id": 24,
        "task_id": "384d0dd8-e8a4-4cfe-963c-d37f256e7662",
        "Question": "In the NCATS PubChem compound database for Food Additive Status classification, find the compound that has a molecular weight of 100 g/mol or less, 6 heavy atoms, 1 or fewer hydrogen bond acceptors, and a complexity between 10 and 15. Of the shared gene-chemical co-occurrences between its two possible enzyme transformations, what is the PubChem CID of the heaviest by molecular weight?",
        "answer": "4192",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"NCATS PubChem compound database\" on Google.\n2. Opened \"PubChem\" on the NCATS NIH website.\n3. Clicked on the \"PubChem Compound\" link.\n4. Clicked on the \"Classification Browser\" link.\n5. Expanded \"Food Additives and Ingredients\" in the list.\n6. Clicked on the number link next to \"Food Additive Status\".\n7. Opened the filters and set them to maximum 100 g/mol weight, minimum 6 heavy atoms, maximum 1 H-bond acceptor, complexity 10-15.\n8. Opened the resulting \"HEXANE\" page.\n9. Scrolled to 10.6 Pharmacology and Biochemistry > Transformations.\n10. Opened the two enzyme transformations' pages (CYP2B6 and CYP2E1).\n11. Opened each one's gene-chemical co-occurrences full list.\n12. Opened each chemical they shared a co-occurrence with.\n13. Compared the weights to find the heaviest (Midazolam).\n14. Noted its PubChem CID (4192).",
            "Number of steps": "14",
            "How long did this take?": "20 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 25,
        "task_id": "e4e91f1c-1dcd-439e-9fdd-cb976f5293fd",
        "Question": "I need to fact-check a citation. This is the citation from the bibliography:\n\nGreetham, David. \"Uncoupled: OR, How I Lost My Author(s).\" Textual Cultures: Texts, Contexts, Interpretation, vol. 3 no. 1, 2008, p. 45-46. Project MUSE, doi:10.2979/tex.2008.3.1.44.\n\nAnd this is the in-line citation:\n\nOur relationship with the authors of the works we read can often be “obscured not by a \"cloak of print\" but by the veil of scribal confusion and mis-transmission” (Greetham 45-46).\n\nDoes the quoted text match what is actually in the article? If Yes, answer Yes, otherwise, give me the word in my citation that does not match with the correct one (without any article).",
        "answer": "cloak",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “greetham uncoupled project muse”.\n2. Click result, an article that matches the given citation.\n3. Ctrl-F for “obscured”.\n4. Find the quote from the question, which describes a “veil of print”, not a cloak.\n5. Express the answer in the specified format, No.",
            "Number of steps": "5",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 26,
        "task_id": "56137764-b4e0-45b8-9c52-1866420c3df5",
        "Question": "Which contributor to the version of OpenCV where support was added for the Mask-RCNN model has the same name as a former Chinese head of government when the names are transliterated to the Latin alphabet?",
        "answer": "Li Peng",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Use search engine to search for \"OpenCV change log\".\n2. Open the top result from GitHub and search the page for \"Mask-RCNN\".\n3. Observe that support for Mask-RCNN model was added in OpenCV version 4.0.0.\n4. Expand the two lists of contributors for version 4.0.0.\n5. Go to the Wikipedia page for head of government. \n6. Scan through and note that for China, the head of government is the premier.\n7. Go to the Wikipedia page for premier of the People's Republic of China.\n8. Go to the linked page for List of premiers of the People's Republic of China.\n9. Compare the list of OpenCV version 4.0.0 contributors' names and the list of premiers of China to find that Li Peng is present in both lists.",
            "Number of steps": "9",
            "How long did this take?": "5 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 27,
        "task_id": "de9887f5-ead8-4727-876f-5a4078f8598c",
        "Question": "What integer-rounded percentage of the total length of the harlequin shrimp recorded in Omar Valencfia-Mendez 2017 paper was the sea star fed to the same type of shrimp in G. Curt Fiedler's 2002 paper?",
        "answer": "22",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Omar Valencfia-Mendez 2017 shrimp paper\" on Google.\n2. Opened \"Decapoda: Palaemonidae: Hymenocera picta Dana, 1852) ...\" on https://www.threatenedtaxa.org/index.php/JoTT/article/view/3238.\n3. Clicked \"PDF/A\".\n4. Found the length of the recorded shrimp as TL in the paper (4.5cm).\n5. Searched \"G. Curt Fiedler 2002 shrimp paper\" on Google.\n6. Opened \"(PDF) The influence of social environment on sex ...\" on https://www.researchgate.net/publication/232696279_The_influence_of_social_environment_on_sex_determination_in_harlequin_shrimp_Hymenocera_picta_Decapoda_Gnathophyllidae.\n7. Found the size of the sea star fed to the shrimp (1cm).\n8. Took the percentage (1 / 4.5 * 100% = 22.22222%).\n9. Rounded to the nearest integer (22%).",
            "Number of steps": "9",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. PDF access\n4. Calculator",
            "Number of tools": "4"
        }
    },
    {
        "id": 30,
        "task_id": "0ff53813-3367-4f43-bcbd-3fd725c1bf4b",
        "Question": "What two-word type of model did Manash Pratim Kashyap's and PS Fader's studies in customer retention studies published during 2018-2019 have in common (no punctuation)?",
        "answer": "beta geometric",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Manash Pratim Kashyap customer retention\" on Google.\n2. Opened https://www.journalijar.com/article/26843/a-simple-model-for-analyzing-the-customer-retention-comparing-rural-and-urban-store/.\n3. Noted \"discrete time beta geometric model\" in the abstract.\n4. Searched \"PS Fader customer retention\" on Google.\n5. Opened https://www.sciencedirect.com/science/article/abs/pii/S1094996807700233.\n6. Noted \"basic model (known as a “shifted-beta-geometric”)\" in the abstract.\n7. Extracted the two words in common.",
            "Number of steps": "6",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 31,
        "task_id": "983bba7c-c092-455f-b6c9-7857003d48fc",
        "Question": "What animals that were mentioned in both Ilias Lagkouvardos's and Olga Tapia's papers on the alvei species of the genus named for Copenhagen outside the bibliographies were also present in the 2021 article cited on the alvei species' Wikipedia page about a multicenter, randomized, double-blind study?",
        "answer": "mice",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"alvei copenhagen\" on Google.\n2. Opened https://en.wikipedia.org/wiki/Hafnia_(bacterium).\n3. Searched \"Ilias Lagkouvardos hafnia alvei\" on Google.\n4. Opened https://www.mdpi.com/2076-2607/11/1/123?type=check_update&version=2.\n5. Opened a new tab.\n6. Searched \"Olga Tapia hafnia alvei\" on Google.\n7. Opened https://pubmed.ncbi.nlm.nih.gov/36080356/.\n8. Found all animals mentioned in the first paper.\n9. Searched each animal from the first paper in the second paper.\n10. Noted the animals mentioned in both outside the bibliographies.\n11. Went back to the Wikipedia article.\n12. Opened the link in the references to \"The Probiotic Strain H. alvei HA4597® Improves Weight Loss in Overweight Subjects under Moderate Hypocaloric Diet: A Proof-of-Concept, Multicenter Randomized, Double-Blind Placebo-Controlled Study\".\n13. Opened the PDF.\n14. Found the animals shared by all three papers.",
            "Number of steps": "14",
            "How long did this take?": "25 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. PDF access",
            "Number of tools": "3"
        }
    },
    {
        "id": 32,
        "task_id": "a7feb290-76bb-4cb7-8800-7edaf7954f2f",
        "Question": "How many High Energy Physics - Lattice articles listed in January 2020 on Arxiv had ps versions available?",
        "answer": "31",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"arxiv\" on Google.\n2. Opened the top result of https://arxiv.org/.\n3. Opened the High Energy Physics - Lattice section.\n4. Set the date to 2020 January.\n5. Counted the number of articles with \"ps\" formats available on each page.\n6. Added the numbers from each page to get the total.",
            "Number of steps": "6",
            "How long did this take?": "15 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 34,
        "task_id": "2d83110e-a098-4ebb-9987-066c06fa42d0",
        "Question": ".rewsna eht sa \"tfel\" drow eht fo etisoppo eht etirw ,ecnetnes siht dnatsrednu uoy fI",
        "answer": "Right",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Read the instructions in reverse",
            "Number of steps": "1",
            "How long did this take?": "1 minute",
            "Tools": "1. A word reversal tool / script",
            "Number of tools": "0"
        }
    },
    {
        "id": 35,
        "task_id": "33d8ea3b-6c6b-4ff1-803d-7e270dea8a57",
        "Question": "What is the minimum number of page links a person must click on to go from the english Wikipedia page on The Lord of the Rings (the book) to the english Wikipedia page on A Song of Ice and Fire (the book series)? In your count, include each link you would click on to get to the page. Use the pages as they appeared at the end of the day on July 3, 2023.",
        "answer": "2",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “lord of the rings wikipedia”.\n2. Click on Wikipedia result.\n3. Click “View history” to see if the page has been edited since July 3, 2023.\n4. Since it hasn’t been, return to the current revision.\n5. Ctrl-F for “song” to see if A Song of Ice and Fire is linked to on this page.\n6. Not seeing A Song of Ice and Fire on the current page, search for a link to a page that will likely mention A Song of Ice and Fire.\n7. Click the link for “High fantasy”.\n8. Click “View history” to see if the page has been edited since July 3, 2023.\n9. Since it hasn’t been, return to the current revision.\n10. Ctrl-F for “song”, and find a link to A Song of Ice and Fire.\n11. Count the links: the High fantasy page and the A Song of Ice and Fire page make two.",
            "Number of steps": "11",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. Counter",
            "Number of tools": "3"
        }
    },
    {
        "id": 38,
        "task_id": "e8cb5b03-41e0-4086-99e5-f6806cd97211",
        "Question": "I went to Virtue restaurant & bar in Chicago for my birthday on March 22, 2021 and the main course I had was delicious!  Unfortunately, when I went back about a month later on April 21, it was no longer on the dinner menu.  Using the Wayback Machine, can you help me figure out which main course was on the dinner menu for Virtue on March 22, 2021 but not April 21, 2021? Answer using the singular form, without articles.",
        "answer": "shrimp",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for \"Virtue restaurant & bar Chicago\"\n2. Find the restaurant's website, https://www.virtuerestaurant.com\n3. Find the page for the dinner menu, https://www.virtuerestaurant.com/menus/\n4. Paste the URL of this page into the Wayback Machine at web.archive.org\n5. Open the versions of the page archived on March 22, 2021 and April 21, 2021\n6. Ensure that both pages are open to the \"dinner menu\" tab\n7. Find the \"large ration\" that was present on the March 22 version of the menu but not April 21: shrimp",
            "Number of steps": "7",
            "How long did this take?": "30 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Access to the Internet Archive, web.archive.org\n4. Text processing/diff tool",
            "Number of tools": "4"
        }
    },
    {
        "id": 39,
        "task_id": "27d5d136-8563-469e-92bf-fd103c28b57c",
        "Question": "¬(A ∧ B) ↔ (¬A ∨ ¬B)\n¬(A ∨ B) ↔ (¬A ∧ ¬B)\n(A → B) ↔ (¬B → ¬A)\n(A → B) ↔ (¬A ∨ B)\n(¬A → B) ↔ (A ∨ ¬B)\n¬(A → B) ↔ (A ∧ ¬B)\n\nWhich of the above is not logically equivalent to the rest? Provide the full statement that doesn't fit.",
        "answer": "(¬A → B) ↔ (A ∨ ¬B)",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Determine the truth values of the first statement: Recognize this is one of De Morgan's Laws showing how to distribute negation over the and conjunction - so it is a tautology.\n2. Determine the truth values of the second statement: Recognize this is one of De Morgan's Laws showing how to distribute negation over the or - so it is a tautology.\n3. Determine the truth values of the third statement: Recognize this is the definition of the contrapositive - so it is a tautology.\n4. Determine the truth values of the fourth statement: Recognize this as an alternative way of stating the conditional - so it is a tautology.\n5. Determine the truth values of the fifth statement: I don't recognize this, so check its truth values:\n6. A: True, B: True |  (¬A → B) ↔ (A ∨ ¬B) = (¬T → T) ↔ (T ∨ ¬T) = (F → T) ↔ (T ∨ F) = T ↔ T = T\n7. A: True, B: False |  (¬A → B) ↔ (A ∨ ¬B) = (¬T → F) ↔ (T ∨ ¬F) = (F → F) ↔ (T ∨ T) = T ↔ T = T\n8. A: False, B: True |  (¬A → B) ↔ (A ∨ ¬B) = (¬F → T) ↔ (F ∨ ¬T) = (T → T) ↔ (F ∨ ¬T) = T ↔ (F ∨ F) = T ↔ F = F\n9. The fifth statement is not a tautology so is the statement that is not logically equivalent. We were asked for only one statement, so can stop here.",
            "Number of steps": "9",
            "How long did this take?": "5-20 minutes",
            "Tools": "None",
            "Number of tools": "0"
        }
    },
    {
        "id": 40,
        "task_id": "dc28cf18-6431-458b-83ef-64b3ce566c10",
        "Question": "My family reunion is this week, and I was assigned the mashed potatoes to bring. The attendees include my married mother and father, my twin brother and his family, my aunt and her family, my grandma and her brother, her brother's daughter, and his daughter's family. All the adults but me have been married, and no one is divorced or remarried, but my grandpa and my grandma's sister-in-law passed away last year. All living spouses are attending. My brother has two children that are still kids, my aunt has one six-year-old, and my grandma's brother's daughter has three kids under 12. I figure each adult will eat about 1.5 potatoes of mashed potatoes and each kid will eat about 1/2 a potato of mashed potatoes, except my second cousins don't eat carbs. The average potato is about half a pound, and potatoes are sold in 5-pound bags. How many whole bags of potatoes do I need? Just give the number.",
        "answer": "2",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Calculate the number of adults (mother, father, brother, brother's wife, aunt, aunt's husband, grandma, grandma's brother, grandma's brother's daughter, grandma's brother's daughter's husband, me = 11).\n2. Calculate the number of children (niece, nephew, cousin, grandma's brother's daughter's kids x3 = 6).\n3. Subtract the number of second cousins (grandma's brother's daughter's kids) (6 - 3 = 3).\n4. Calculate the adult potatoes (11 * 1.5 = 16.5).\n5. Calculate the child potatoes (3 * 0.5 = 1.5).\n6. Add to get the total potatoes (16.5 + 1.5 = 18).\n7. Multiply to get the pounds of potatoes (18 * 0.5 = 9 pounds).\n8. Calculate the number of 5-lb bags needed (9 / 5 = 1.8).\n9. Round up to get total bags (2).",
            "Number of steps": "9",
            "How long did this take?": "8 minutes",
            "Tools": "1. Calculator",
            "Number of tools": "1"
        }
    },
    {
        "id": 41,
        "task_id": "b816bfce-3d80-4913-a07d-69b752ce6377",
        "Question": "In Emily Midkiff's June 2014 article in a journal named for the one of Hreidmar's sons that guarded his house, what word was quoted from two different authors in distaste for the nature of dragon depictions?",
        "answer": "fluffy",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Hreidmar's sons\" on Google.\n2. Opened https://en.wikipedia.org/wiki/Hrei%C3%B0marr.\n3. Noted Fafnir guarded his house.\n4. Searched \"Emily Midkiff June 2014 Fafnir\" on Google.\n5. Opened \"Fafnir 2/2014 |\" at http://journal.finfar.org/journal/archive/fafnir-22014/.\n6. Clicked the title '“Dragons are Tricksy”: The Uncanny Dragons of Children’s Literature'.\n7. Found the word in quotation marks from two different authors (Ruth Stein and Margaret Blount) in the text.",
            "Number of steps": "7",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 42,
        "task_id": "f46b4380-207e-4434-820b-f32ce04ae2a4",
        "Question": "It is 1999. Before you party like it is 1999, please assist me in settling a bet.\n\nFiona Apple and Paula Cole released albums prior to 1999. Of these albums, which didn't receive a letter grade from Robert Christgau? Provide your answer as a comma delimited list of album titles, sorted alphabetically.",
        "answer": "Harbinger, Tidal",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. search \"Fiona Apple discography\"\n2. find her album released prior to 1999 was \"Tidal\"\n3. search \"Paula Cole discography\"\n4. find her album released prior to 1999 was \"This Fire\" and \"Harbinger\".\n5. search \"Robert Christgau\"\n6. use his website to search \"Fiona Apple\"\n7. note his review for Tidal was an emoticon, not a letter grade\n8. use his website to search \"Paula Cole\"\n9. note his review for This Fire was a C+ and that he did not review Harbinger.",
            "Number of steps": "9",
            "How long did this take?": "10 minutes",
            "Tools": "1. web browser\n2. search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 43,
        "task_id": "72e110e7-464c-453c-a309-90a95aed6538",
        "Question": "Under DDC 633 on Bielefeld University Library's BASE, as of 2020, from what country was the unknown language article with a flag unique from the others?",
        "answer": "Guatemala",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Bielefeld University Library's BASE\" on Google.\n2. Opened https://www.base-search.net/.\n3. Clicked \"Browsing\".\n4. Selected Clicked \"Dewey Decimal Classification (DDC) > 6 > 63 > 633.\n5. Refined to Unknown Language.\n6. Found the only article with a flag unique from the others in the search from pre-2020.\n7. Copied the country name from the institution.",
            "Number of steps": "7",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 44,
        "task_id": "05407167-39ec-4d3a-a234-73a9120c325d",
        "Question": "In the 2018 VSCode blog post on replit.com, what was the command they clicked on in the last video to remove extra lines?",
        "answer": "Format Document",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Opened replit.com.\n2. Clicked \"Blog\".\n3. Searched \"vscode\".\n4. Opened \"Zero Setup VSCode Intelligence\" from 2018.\n5. Scrolled down to the bottom video.\n6. Noted the command used (Format Document).",
            "Number of steps": "6",
            "How long did this take?": "5 minutes",
            "Tools": "1. Web browser\n2. GIF parsing tools",
            "Number of tools": "2"
        }
    },
    {
        "id": 45,
        "task_id": "b9763138-c053-4832-9f55-86200cb1f99c",
        "Question": "Compute the check digit the Tropicos ID for the Order Helotiales would have if it were an ISBN-10 number.",
        "answer": "3",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search \"Tropicos ID Order Helotiales\"\n2. Find the correct ID on the first result\n3. Search \"isbn 10 check digit calculator\" or calculate check digit by hand",
            "Number of steps": "3",
            "How long did this take?": "5 minutes",
            "Tools": "1. web browser\n2. search engine\n3. calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 46,
        "task_id": "16d825ff-1623-4176-a5b5-42e0f5c2b0ac",
        "Question": "What time was the Tri-Rail train that carried the most passengers on May 27, 2019 scheduled to arrive in Pompano Beach? Express your answer in the 12-hour digital clock format without leading zero if any, and include whether it is AM or PM.",
        "answer": "6:41 PM",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “tri rail ridership may 2019”.\n2. Click result for Tri-Rail website.\n3. Click drop-down for 2019.\n4. Click PDF for May 2019 ridership report.\n5. Scroll down to find the statistics for each train.\n6. Locate the ridership numbers for the 27th, and scroll to find the train with the highest number for that day: train number P685.\n7. Search the web for “tri rail schedule may 2019”.\n8. Click result for Tri-Rail website.\n9. Noticing that the train doesn’t appear on the weekday schedule, click the link for the weekend/holiday schedule. May 27th may have been a holiday.\n10. Locate the time that P685 is scheduled to arrive at Pompano Beach: 6:41 PM.\n11. To confirm, search “may 2019 holidays”.\n12. Verify that May 27th, 2019 was the Memorial Day holiday.\n13. Since the Tri-Rail website didn’t give a date for its schedule, search the web for “tri rail schedule changes” to see if the schedule has changed since 2019.\n14. The only result mentioning a schedule change dates to 2015, so 6:41 PM seems like the answer.",
            "Number of steps": "14",
            "How long did this take?": "5-10 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. PDF viewer",
            "Number of tools": "3"
        }
    },
    {
        "id": 49,
        "task_id": "544b7f0c-173a-4377-8d56-57b36eb26ddf",
        "Question": "In Valentina Re’s contribution to the 2017 book “World Building: Transmedia, Fans, Industries”, what horror movie does the author cite as having popularized metalepsis between a dream world and reality? Use the complete name with article if any.",
        "answer": "A Nightmare on Elm Street",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “world building transmedia fans industries”.\n2. Click link to PDF of the book.\n3. Navigate to the Media Cited section of the essay written by Valentina Re.\n4. Identify the horror movie, A Nightmare on Elm Street.\n5. Navigate to its mention in the essay, to confirm that it does relate to metalepsis from a dream world.",
            "Number of steps": "5",
            "How long did this take?": "5-10 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. PDF viewer",
            "Number of tools": "3"
        }
    },
    {
        "id": 50,
        "task_id": "42576abe-0deb-4869-8c63-225c2d75a95a",
        "Question": "In the fictional language of Tizin, basic sentences are arranged with the Verb first, followed by the direct object, followed by the subject of the sentence. I want to express my love for apples to my Tizin friend. \n\nThe word that indicates oneself is \"Pa\" is the nominative form, \"Mato\" is the accusative form, and \"Sing\" is the genitive form. \n\nThe root verb that indicates an intense like for something is \"Maktay\". When it is used in the present, it is used in it's root form, when it is used in the preterit past, it is \"Tay\", and when it is used in the imperfect past, it is \"Aktay\". It is used differently than in English, and is better translated as \"is pleasing to\", meaning that the thing doing the liking is actually the object of the sentence rather than the subject.\n\nThe word for apples is borrowed from English in Tizin, and so it is \"Apple\" is the nominative form, \"Zapple\" is the accusative form, and \"Izapple\" is the genitive form. \n\nPlease translate \"I like apples\" to Tizin.",
        "answer": "Maktay mato apple",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Determine the order of words from the prompt (Verb - Object - Subject).\n2. Determine the present form of Like (\"Maktay\")\n3. Determined that since the person doing the liking is the object of the sentence, the next word must be the one for oneself in object form.\n4. Determined the accusative form for onesself (\"mato\").\n5. Determined the nominative form for apple. (\"apple\").\n6. Put the words together in the correct order.",
            "Number of steps": "6",
            "How long did this take?": "2 minutes",
            "Tools": "None",
            "Number of tools": "0"
        }
    },
    {
        "id": 51,
        "task_id": "6b078778-0b90-464d-83f6-59511c811b01",
        "Question": "The Metropolitan Museum of Art has a portrait in its collection with an accession number of 29.100.5. Of the consecrators and co-consecrators of this portrait's subject as a bishop, what is the name of the one who never became pope?",
        "answer": "Alfonso Visconti",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. I searched for \"Metropolitan Museum of Art search collection\" using a search engine to get to the \"Search the Collection\" page on the Metropolitan Museum of Art's website.\n2. I selected \"Accession Number\" in the search field dropdown and entered \"29.100.5\" into the text input, noting that the only result is a portrait titled \"Cardinal Fernando Niño de Guevara (1541–1609)\"\n3. I went to Fernando Niño de Guevara's Wikipedia page and noted that he was consecrated bishop by Pope Clement VIII with Camillo Borghese and Alfonso Visconti as co-consecrators.\n4. I eliminated Pope Clement VIII as the answer since he was obviously a pope based on his title.\n5. I went to Camillo Borghese's Wikipedia page and noted that he became Pope Paul V, eliminating him as the answer.\n6. I went to Alfonso Visconti's Wikipedia page and noted that he never became pope, so the answer to the question is \"Alfonso Visconti\".",
            "Number of steps": "6",
            "How long did this take?": "5 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 52,
        "task_id": "b415aba4-4b68-4fc6-9b89-2c812e55a3e1",
        "Question": "In Nature journal's Scientific Reports conference proceedings from 2012, in the article that did not mention plasmons or plasmonics, what nano-compound is studied? Don't use the prefix nano in your answer if there is one.",
        "answer": "diamond",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"nature scientific reports\" on Google.\n2. Opened https://www.nature.com/srep/.\n3. Selected Explore Content > Research Articles.\n4. Filtered for Conference Proceedings from 2012.\n5. Opened each article link.\n6. Checked for \"plasmon\" or \"plasmonic\".\n7. Noted the nano-compound in the article that did not include either.",
            "Number of steps": "7",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 54,
        "task_id": "08cae58d-4084-4616-b6dd-dd6534e4825b",
        "Question": "According to Google Finance, when was the first year the Apple stock went above $50 (without adjusting for stock split)?",
        "answer": "2018",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. typed in \"Google finance apple\" on browser\n2. clicked first link\n3. clicked \"max\" to display entire history of apple stock\n4. hovered mouse around the area that line crosses over $50\n5. noted the date",
            "Number of steps": "5",
            "How long did this take?": "4 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. code/data analysis tools",
            "Number of tools": "2"
        }
    },
    {
        "id": 56,
        "task_id": "2dfc4c37-fec1-4518-84a7-10095d30ad75",
        "Question": "According to Box Office Mojo's 2020 Worldwide Box Office list, how many of the top 10 highest-grossing worldwide movies are also on the top 10 highest-grossing domestic movies? Your answer should be a numerical integer value.",
        "answer": "6",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Google searched \"Box Office Mojo's 2020 Worldwide Box Office\".\n2. Clicked on the first result: Box Office Mojo, https://www.boxofficemojo.com/year/world/2020/, 2020 Worldwide Box Office.\n3. Looked at the top 10 highest-grossing worldwide movies of 2020: 1. The Eight Hundred, 2. Demon Slayer the Movie: Mugen Train, 3. Bad Boys for Life, 4. My People, My Homeland, 5. Tenet, 6. Sonic the Hedgehog, 7. Dolittle, 8. Legend of Deification, 9. A Little Red Flower, 10. The Croods: A New Age.\n4. Clicked on the column labeled \"Domestic\" to sort by highest-grossing domestic movies of 2020.\n5. Looked at the first 10 movies on the list: Bad Boys for Life, Sonic the Hedgehog, Birds of Prey, Dolittle, The Invisible Man, The Call of the Wild, Onward, The Croods: A New Age, Tenet, Demon Slayer the Movie: Mugen Train.\n6. For each of these movies: If the number under \"Rank\" is less than or equal to 10, then the movie is also among the top 10 highest-grossing worldwide movies of 2020.\n7. Form the final list: Bad Boys for Life, Sonic the Hedgehog, Dolittle, The Croods: A New Age, Tenet, Demon Slayer the Movie: Mugen Train.\n8. Count the number of movies on the list: 6,",
            "Number of steps": "8",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web Browser\n2. Search Engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 57,
        "task_id": "935e2cff-ae78-4218-b3f5-115589b19dae",
        "Question": "In the year 2022, and before December, what does \"R\" stand for in the three core policies of the type of content that was violated in the public logs on the Legume Wikipedia page?",
        "answer": "research",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"legume wikipedia\" on Google.\n2. Opened \"Legume\" on Wikipedia.\n3. Clicked \"View history\".\n4. Clicked \"View logs for this page\".\n5. Checked all types of logs.\n6. Set the date to November 2022.\n7. Followed the BLP link of the violation.\n8. Noted the meaning of \"R\".",
            "Number of steps": "8",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 58,
        "task_id": "4fc2f1ae-8625-45b5-ab34-ad4433bc21f8",
        "Question": "Who nominated the only Featured Article on English Wikipedia about a dinosaur that was promoted in November 2016?",
        "answer": "FunkMonk",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search \"Wikipedia featured articles promoted in november 2016\"\n2. Click through to the appropriate page and find the person who nominated Giganotosaurus.",
            "Number of steps": "2",
            "How long did this take?": "5 minutes",
            "Tools": "1. web browser\n2. search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 59,
        "task_id": "5188369a-3bbe-43d8-8b94-11558f909a08",
        "Question": "What writer is quoted by Merriam-Webster for the Word of the Day from June 27, 2022?",
        "answer": "Annie Levin",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search \"merriam-webster word of the day\" on Google search.\n2. Opened the top \"Word of the Day\" result from the Merriam-Webster dictionary online.\n3. Clicked \"SEE ALL WORDS OF THE DAY\" at the bottom.\n4. Scrolled down to June 27, 2022.\n5. Opened the Word of the Day (\"jingoism\").\n6. Scrolled down and identified context quote for \"jingoism\".\n7. Noted the name attributed to the quote. ",
            "Number of steps": "7",
            "How long did this take?": "8 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Audio capability",
            "Number of tools": "3"
        }
    },
    {
        "id": 60,
        "task_id": "9f41b083-683e-4dcf-9185-ccfeaa88fa45",
        "Question": "How many pages if the 2023 IPCC report (85 pages version) mentions nuclear energy?",
        "answer": "0",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Open a web browser\n2. Go to a search engine\n3. Search for \"2023 IPCC report\"\n4. Click on the link for \"AR6 Synthesis Report: Climate Change 2023\" \n5. Click on \"Read the Report\"\n6. Click on \"SYR (Full volume)\n7. Check the page count of the PDF\n8. Go back to the previous page (report is too long)\n9. Click on \"Longer Report\"\n10. Check the page count of the PDF\n11. Search for \"nuclear energy\" within the PDF\n12. Look at the total number of hits",
            "Number of steps": "12",
            "How long did this take?": "4 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. PDF reader ",
            "Number of tools": "3"
        }
    },
    {
        "id": 61,
        "task_id": "6f37996b-2ac7-44b0-8e68-6d28256631b4",
        "Question": "Given this table defining * on the set S = {a, b, c, d, e}\n\n|*|a|b|c|d|e|\n|---|---|---|---|---|---|\n|a|a|b|c|b|d|\n|b|b|c|a|e|c|\n|c|c|a|b|b|a|\n|d|b|e|b|e|d|\n|e|d|b|a|d|c|\n\nprovide the subset of S involved in any possible counter-examples that prove * is not commutative. Provide your answer as a comma separated list of the elements in the set in alphabetical order.",
        "answer": "b, e",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Compile the markdown.\n2. Look at the table across the diagonal to see if any portions are not symmetrical.\n3. See that b * e != e * b, but all others are symmetrical.",
            "Number of steps": "3",
            "How long did this take?": "5 minutes",
            "Tools": "1. Markdown",
            "Number of tools": "1"
        }
    },
    {
        "id": 62,
        "task_id": "56db2318-640f-477a-a82f-bc93ad13e882",
        "Question": "The following numbers function similarly to ISBN 13 numbers, however, their validation methods are slightly different. Rather than using alternate weights of 1 and 3, the checksum digit is calculated with an alternate weight of 1 and some other positive integer less than 10. Otherwise, the checksum digit is calculated as expected. Unfortunately, there is an error in the data. Two adjacent columns have been transposed. These errored columns do not involve the final column or one of the first three columns. Using this information, please provide all potential solutions with the unknown weight and the smaller index of the two errored columns (assume we start our indexing at 0 and ignore hyphens). Give your answer in the form x, y where x is the weight and y is the smaller index of the two transposed columns.\n\n978-354181391-9\n978-946669746-1\n978-398036139-6\n978-447656680-4\n978-279586664-7\n978-595073693-3\n978-976647652-6\n978-591178125-5\n978-728465924-5\n978-414825155-9",
        "answer": "7, 9",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Consider the numbers as if the first potential columns were the ones transposed, which would be smallest index 3 giving solution (n, 3).\n2. \"Fix\" the columns in the first number and see if any n from 1-9 can generate the proper check digit. Calculations:\n978-354181391-9\n978-534181391-9\n(9+7n+8+5n+3+4n+1+8n+1+3n+9+1n) mod 10 ≡ (10 - 9)\nn = 5 is our only possible solution if these are the transposed columns.\n3. \"Fix\" the columns in the second number and see if n = 5 is still a solution:\n978-946669746-1\n978-496669746-1\n(9+7n+8+4n+9+6n+6+6n+9+7n+4+6n) mod 10 ≡ (10 - 1)\nWhen n = 5, (9+7n+8+4n+9+6n+6+6n+9+7n+4+6n) mod 10 ≡ 5, so this fails. There is no consistent solution if columns 3 and 4 are transposed.\n4. See if there is a valid solution for (n, 4) or columns 4 and 5 transposed under some weight n.\n5. \"Fix\" the columns in the first number and see if any n from 1-9 can generate the proper check digit. Calculations:\n978-354181391-9\n978-345181391-9\n(9+7n+8+3n+4+5n+1+8n+1+3n+9+1n) mod 10 ≡ (10 - 9)\nn = 7 is our only possible solution if these are the transposed columns.\n6. \"Fix\" the columns in the second number and see if n = 7 is still a solution:\n978-946669746-1\n978-964669746-1\n(9+7n+8+9n+6+4n+6+6n+9+7n+4+6n) mod 10 ≡ (10 - 1)\nWhen n = 7, (9+7n+8+9n+6+4n+6+6n+9+7n+4+6n) mod 10 ≡ 5, so this fails. There is no consistent solution if columns 4 and 5 are transposed.\n7. See if there is a valid solution for (n, 5) or columns 5 and 6 transposed under some weight n.\n8. \"Fix\" the columns in the first number and see if any n from 1-9 can generate the proper check digit. Calculations:\n978-354181391-9\n978-351481391-9\n(9+7n+8+3n+5+1n+4+8n+1+3n+9+1n) mod 10 ≡ (10 - 9)\nn = 5 is our only possible solution if these are the transposed columns.\n9. \"Fix\" the columns in the second number and see if n = 5 is still a solution:\n978-946669746-1\n978-946669746-1\n(9+7n+8+9n+4+6n+6+6n+9+7n+4+6n) mod 10 ≡ (10 - 1)\nWhen n = 5, (9+7n+8+9n+4+6n+6+6n+9+7n+4+6n) mod 10 ≡ 5, so this fails. There is no consistent solution if columns 5 and 6 are transposed.\n10. See if there is a valid solution for (n, 6) or columns 6 and 7 transposed under some weight n.\n11. \"Fix\" the columns in the first number and see if any n from 1-9 can generate the proper check digit. Calculations:\n978-354181391-9\n978-354811391-9\n(9+7n+8+3n+5+4n+8+1n+1+3n+9+1n) mod 10 ≡ (10 - 9)\nn = 9 is our only possible solution if these are the transposed columns.\n12. \"Fix\" the columns in the second number and see if n = 9 is still a solution:\n978-946669746-1\n978-946669746-1\n(9+7n+8+9n+4+6n+6+6n+9+7n+4+6n) mod 10 ≡ (10 - 1)\nWhen n = 9, (9+7n+8+9n+4+6n+6+6n+9+7n+4+6n) mod 10 ≡ 9, so this solution holds for the second number.\n13. \"Fix\" the columns in the third number and see if n = 9 is still a solution:\n978-398036139-6\n978-398306139-6\n(9+7n+8+3n+9+8n+3+0n+6+1n+3+9n) mod 10 ≡ (10 - 6)\nWhen n = 9, (9+7n+8+3n+9+8n+3+0n+6+1n+3+9n) mod 10 ≡ 0, so this fails. There is no consistent solution if columns 6 and 7 are transposed.\n14. See if there is a valid solution for (n, 7) or columns 7 and 8 transposed under some weight n.\n15. \"Fix\" the columns in the first number and see if any n from 1-9 can generate the proper check digit. Calculations:\n978-354181391-9\n978-354118391-9\n(9+7n+8+3n+5+4n+1+1n+8+3n+9+1n) mod 10 ≡ (10 - 9)\nn = 9 is our only possible solution if these are the transposed columns.\n16. \"Fix\" the columns in the second number and see if n = 9 is still a solution:\n978-946669746-1\n978-946696746-1\n(9+7n+8+9n+4+6n+6+9n+6+7n+4+6n) mod 10 ≡ (10 - 1)\nWhen n = 9, (9+7n+8+9n+4+6n+6+9n+6+7n+4+6n) mod 10 ≡ 3, so this fails. There is no consistent solution if columns 7 and 8 are transposed.\n17. See if there is a valid solution for (n, 8) or columns 8 and 9 transposed under some weight n.\n18. \"Fix\" the columns in the first number and see if any n from 1-9 can generate the proper check digit. Calculations:\n978-354181391-9\n978-354183191-9\n(9+7n+8+3n+5+4n+1+8n+3+1n+9+1n) mod 10 ≡ (10 - 9)\nn = 4 and n = 9 are both possible solutions to this modular equation.\n19. \"Fix\" the columns in the second number and see if n = 4 and n = 9 are still solutions:\n978-946669746-1\n978-946667946-1\n(9+7n+8+9n+4+6n+6+6n+7+9n+4+6n) mod 10 ≡ (10 - 1)\nWhen n = 4, (9+7n+8+9n+4+6n+6+6n+7+9n+4+6n) mod 10 ≡ 0. When n = 9, (9+7n+8+9n+4+6n+6+6n+7+9n+4+6n) mod 10 ≡ 5. As neither solution found works for the second number, this fails. There is no consistent solution if columns 8 and 9 are transposed.\n20. See if there is a valid solution for (n, 9) or columns 9 and 10 transposed under some weight n.\n21. \"Fix\" the columns in the first number and see if any n from 1-9 can generate the proper check digit. Calculations:\n978-354181391-9\n978-354181931-9\n(9+7n+8+3n+5+4n+1+8n+1+9n+3+1n) mod 10 ≡ (10 - 9)\nn = 2 and n = 7 are both possible solutions to this modular equation.\n22. \"Fix\" the columns in the second number and see if n = 2 and n = 7 are still solutions:\n978-946667946-1\n978-946667496-1\n(9+7n+8+9n+4+6n+6+6n+7+4n+9+6n) mod 10 ≡ (10 - 1)\nWhen n = 2, (9+7n+8+9n+4+6n+6+6n+7+4n+9+6n) mod 10 ≡ 9 and when n = 7 (9+7n+8+9n+4+6n+6+6n+7+4n+9+6n) mod 10 ≡ 9, so both n = 2 and n = 7 remain consistent.\n23. \"Fix\" the columns in the third number and see if n = 2 and n = 7 are still solutions:\n978-398036139-6\n978-398036319-6\n(9+7n+8+3n+9+8n+0+3n+6+3n+1+9n) mod 10 ≡ (10 - 6)\nWhen n = 2, (9+7n+8+3n+9+8n+0+3n+6+3n+1+9n) mod 10 ≡ 9, so n cannot be 2. When n = 7, (9+7n+8+3n+9+8n+0+3n+6+3n+1+9n) mod 10 ≡ 4, so this solution is still consistent.\n24. \"Fix\" the columns in the fourth number and see if n = 7 is still a solution:\n978-447656680-4\n978-447656860-4\nWhen n = 7, (9+7n+8+4n+4+7n+6+5n+6+8n+6+0n) mod 10 ≡ (10 - 4)\n(9+7n+8+4n+4+7n+6+5n+6+8n+6+0n) mod 10 ≡ 6, so n = 7 is still a potential solution.\n24. \"Fix\" the columns in the fifth number and see if n = 7 is still a solution:\n978-279586664-7\n978-279586664-7\n(9+7n+8+2n+7+9n+5+8n+6+6n+6+4n) mod 10 ≡ (10 - 7)\nWhen n = 7, (9+7n+8+2n+7+9n+5+8n+6+6n+6+4n) mod 10 ≡ 3, so n = 7 is still a potential solution.\n24. \"Fix\" the columns in the sixth number and see if n = 7 is still a solution:\n978-595073693-3\n978-595073963-3\n(9+7n+8+5n+9+5n+0+7n+3+9n+6+3n) mod 10 ≡ (10 - 3)\nWhen n = 7, (9+7n+8+5n+9+5n+0+7n+3+9n+6+3n) mod 10 ≡ 7, so n = 7 is still a potential solution.\n25. \"Fix\" the columns in the seventh number and see if n = 7 is still a solution:\n978-976647652-6\n978-976647562-6\n(9+7n+8+9n+7+6n+6+4n+7+5n+6+2n) mod 10 ≡ (10 - 6)\nWhen n = 7, (9+7n+8+9n+7+6n+6+4n+7+5n+6+2n) mod 10 ≡ 4, so n = 7 is still a potential solution.\n26. \"Fix\" the columns in the eighth number and see if n = 7 is still a solution:\n978-591178125-5\n978-591178215-5\n(9+7n+8+5n+9+1n+1+7n+8+2n+1+5n) mod 10 ≡ (10 - 5)\nWhen n = 7, (9+7n+8+5n+9+1n+1+7n+8+2n+1+5n) mod 10 ≡ 5, so n = 7 is still a potential solution.\n27. \"Fix\" the columns in the ninth number and see if n = 7 is still a solution:\n978-728465924-5\n978-728465294-5\n(9+7n+8+7n+2+8n+4+6n+5+2n+9+4n) mod 10 ≡ (10 - 5)\nWhen n = 7, (9+7n+8+7n+2+8n+4+6n+5+2n+9+4n) mod 10 ≡ 5, so n = 7 is still a potential solution.\n28. \"Fix\" the columns in the final number and see if n = 7 is still a solution:\n978-414825155-9\n978-414825515-9\n(9+7n+8+4n+1+4n+8+2n+5+5n+1+5n) mod 10 ≡ (10 - 9)\nWhen n = 7, (9+7n+8+4n+1+4n+8+2n+5+5n+1+5n) mod 10 ≡ 1, so n = 7 is a consistent solution for all the numbers given. This means that (7, 9) is a solution to the problem.\n29. As the problem asks for all possible solutions, we need to check to see if there is a valid solution for (n, 10) or columns 10 and 11 transposed under some weight n even though we found a solution already. It is possible the solution we found is not unique.\n30. \"Fix\" the columns in the first number and see if any n from 1-9 can generate the proper check digit. Calculations:\n978-354181391-9\n978-354181319-9\n(9+7n+8+3n+5+4n+1+8n+1+3n+1+9n) mod 10 ≡ (10 - 9)\nn = 4 and n = 9 are both possible solutions to this modular equation.\n31. \"Fix\" the columns in the second number and see if n = 4 and n = 9 are still solutions:\n978-946669746-1\n978-946669764-1\n(9+7n+8+9n+4+6n+6+6n+9+7n+6+4n) mod 10 ≡ (10 - 1)\nWhen n = 4, (9+7n+8+9n+4+6n+6+6n+9+7n+6+4n) mod 10 ≡ 8, so n cannot be 4. When n = 9, (9+7n+8+9n+4+6n+6+6n+9+7n+6+4n) mod 10 ≡ 3, so n cannot be 9. As neither solution found works for the second number, this fails. There is no consistent solution if columns 10 and 11 are transposed.\n32. We checked all possible forms of the error and found only one potential solution, (7, 9) so this is our only answer.",
            "Number of steps": "32",
            "How long did this take?": "60 minutes",
            "Tools": "1. a calculator",
            "Number of tools": "1"
        }
    },
    {
        "id": 67,
        "task_id": "71345b0a-9c7d-4b50-b2bf-937ec5879845",
        "Question": "On a leap day before the year 2008, a joke was removed from the Wikipedia page for “Dragon”. What was the phrase that was removed? Give the phrase as it appeared on the page, but without punctuation.",
        "answer": "Here be dragons",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “dragon wikipedia”.\n2. Click the Wikipedia result.\n3. Click “View history” to see changes made to the page.\n4. Navigate through the edits until I get to the beginning of 2008.\n5. Browse the edits before 2008 for a change made on February 29, which would be a leap day.\n6. Find an edit made on February 29, 2004, with a comment indicating the prior edit was humorous.\n7. Click the February 29 version of the page, and examine it.\n8. Return to the revision history, and click the previous version of the page.\n9. Note the phrase at the top of the page that wasn’t present in the later version: “Here be dragons”.",
            "Number of steps": "9",
            "How long did this take?": "10-15 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 68,
        "task_id": "72c06643-a2fa-4186-aa5c-9ec33ae9b445",
        "Question": "What is the volume in milliliters of a system comprised of 0.312 kg Freon-12 refrigerant when placed at the bottom of the Marianas Trench and allowed to stabilize at the Trench's peak temperature, rounded to the nearest mL? Provide your answer as just an integer value.",
        "answer": "55",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"volume from pressure, temperature, mass\" on Google.\n2. Opened the \"Specific Volume: Definition, Formulas, Examples - ThoughtCo\" page.\n3. Noted that PV = nRT where V is volume, R is the ideal gas constant, T is temperature, P is pressure, and M is moles.\n4. Followed the \"gas constant\" link.\n5. Noted that R = 8.31446261815324 J/K-mol.\n6. Searched \"Freon-12\" on Google.\n7. Opened the \"Dichlorodifluoromethane\" on Wikipedia.\n8. Noted the molar mass of 120.91 g/mol.\n9. Converted 0.312 kg = 312 g.\n10. Calculated moles: 312 g / 120.91 g/mol = 2.58 mol.\n11. Searched \"Marianas Trench pressure\" on Google.\n12. Noted the pressure in the featured text snippet of 15,750 psi.\n13. Searched \"psi to atm\" on Google.\n14. Noted 1 psi = 0.068046 atm.\n15. Converted psi to atm: 15,750 * 0.068046 = 1071.7245 atm.\n16. Searched \"Marianas Trench temperature\" on Google.\n17. Noted the temperature range from 34-39F.\n18. Searched \"F to K\" on Google.\n19. Noted that K equals F plus 459.67 times 5/9 from the conversion tool.\n20. Converted temperature to K: 39 + 459.67 * 5/9 = 277.039K.\n21. Searched \"joules to atm\" on Google and noted the conversion of 1 Joule = 0.0098692326671601 Liter Atmosphere from the featured text snippet.\n22. Converted 8.31446261815324 * 0.0098692326671601 = 0.08205736608096 L-atm/K-mol.\n21. Changed PV = nRT to V = nRT/P\n22. Plugged numbers into the ideal gas equation: V = (0.08205736608096 L-atm/K-mol * 277.039K * 2.58 mol) / (1071.7245 atm) = 0.05473 L.\n23. Converted to mL: 0.05473 L = 54.73.\n24. Rounded to the nearest mL.",
            "Number of steps": "24",
            "How long did this take?": "20 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 69,
        "task_id": "ebbc1f13-d24d-40df-9068-adcf735b4240",
        "Question": "The Latin root of the Yola word \"gimlie\" shares a spelling with a Spanish word. What is the Google translation of the source title for the 1994 example sentence for that word in the Collins Spanish-to-English dictionary online? Answer in plain text, without punctuation.",
        "answer": "The World of the Twenty First Century",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Yola gimlie\" on Google.\n2. Opened https://en.wiktionary.org/wiki/gimlie#Yola.\n3. Noted the Latin root \"caminata\".\n4. Searched \"Collins Spanish-to-English dictionary caminata\" on Google.\n5. Opened https://www.collinsdictionary.com/dictionary/spanish-english/caminata.\n6. Scrolled down to the 1994 example.\n7. Searched \"El Mundo del Siglo Veintiuno translation\" on Google.\n8. Noted the result in the Translate widget.",
            "Number of steps": "8",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Google Translate access",
            "Number of tools": "3"
        }
    },
    {
        "id": 70,
        "task_id": "7b5377b0-3f38-4103-8ad2-90fe89864c04",
        "Question": "Find the value of x to the nearest tenth: Lx = (d/dx * (A * x-squared)) + 4-thousand'n'ninety-7 minus C\nWhere L is the last two digits of the year of the Venezuelan Declaration of Independence,\nA is the number of colors in the TikTok logo as of July 2023, excluding black and white,\nand C is the height of the average woman in the Philippines according to a July 2023 Business Insider article, rounded to the nearest whole centimeter",
        "answer": "563.9",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Googled Venezuelan Declaration of Independence, found it to be in 1811, thus L = 11\n2. Googled TikTok logo, found 4 colors, 2 of which are black and white, so A = 2\n3. Googled average height of woman in Philippines, found it to be 149.6cm, so C = 150\n4. Deciphered formula to mean 11x = (d/dx(2x^2)) + 4097 - 150\n5. Used simple calculus and algebra to solve the equation",
            "Number of steps": "5",
            "How long did this take?": "40 minutes",
            "Tools": "1. A web browser\n2. A search engine\n3. A calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 73,
        "task_id": "ad37a656-079a-49f9-a493-7b739c9167d1",
        "Question": "On July 15, 2008, Phys.org published an article about a catastrophe. Find the explosive force of this catastrophe according to Encyclopedia Britannica, then find the name of the US nuclear test that had the same yield. Your answer should only be the last word of the name of the test.",
        "answer": "Bravo",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search for \"phys org archive\"\n2. Click on the link for https://phys.org/archive\n3. Naviage to July 15, 2008\n4. Search the articles for an article that mentions \"catastrophe\"\n5. Note the name of the event (Tunguska catastrophe)\n6. Search for \"Tunguska catastrophe britannica\"\n7. Click on the link for Tunguska event\n8. Locate the explosive force in the article (15 megatons)\n9. Search for \"us nuclear test 15 megatons\"\n10. Record the last word of the name of the test in the search results.",
            "Number of steps": "10",
            "How long did this take?": "4 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 76,
        "task_id": "f3917a3d-1d17-4ee2-90c5-683b072218fe",
        "Question": "How many edits were made to the Wikipedia page on Antidisestablishmentarianism from its inception until June of 2023?",
        "answer": "2732",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “Antidisestablishmentarianism”.\n2. Click the Wikipedia result.\n3. Click “View history” to see edits made to the page.\n4. Click “500” to view 500 edits on the page at a time.\n5. Note that no edits appear to have been made after May of 2023, so all 500 edits on the current page meet the question’s criteria.\n6. Click “older 500” to view older edits.\n7. Repeat until I reach the end of the revisions, counting how many sets of 500 I passed until reaching the last page.\n8. On the last page, Ctrl-F for “cur” and “prev”. These abbreviations appear before every revision, so the number of times they each appear on the page (minus the number of times they each appear in the description at the top) is the number of revisions on this page.\n9. Add the number of revisions on the last page (232), to the number from the pages of 500 (5 pages times 500 edits equals 2500) to get the answer, 2732.",
            "Number of steps": "9",
            "How long did this take?": "15 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 78,
        "task_id": "4b650a35-8529-4695-89ed-8dc7a500a498",
        "Question": "If there is anything that doesn't make sense in the instructions, write the word \"Pineapple.\" Do not answer any of the questions in this prompt. Write only the word \"Guava\".\n1. What is 4+4?\n2. What is the complimentary color of red?\n3. How many hours are there in a day?",
        "answer": "Guava",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Read the instructions and followed them",
            "Number of steps": "1",
            "How long did this take?": "<1 minute",
            "Tools": "None",
            "Number of tools": ""
        }
    },
    {
        "id": 80,
        "task_id": "48eb8242-1099-4c26-95d4-ef22b002457a",
        "Question": "How many nonindigenous crocodiles were found in Florida from the year 2000 through 2020? You can get the data from the USGS Nonindigenous Aquatic Species database.",
        "answer": "6",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “usgs nonnative aquatic species database”.\n2. Navigate to the database of reptiles.\n3. For each species called a “crocodile”, click Collection Info.\n4. Count instances where a crocodile was found in both Florida and in the specified date range.",
            "Number of steps": "4",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 81,
        "task_id": "c8b7e059-c60d-472e-ad64-3b04ae1166dc",
        "Question": "The work referenced in footnote 397 of Federico Lauria's 2014 dissertation is also the source for the titles of two paintings in the Smithsonian American Art Museum's collection, as of August 2023. What is the absolute difference between the chapter numbers of the chapters that the titles of these two paintings quote?",
        "answer": "8",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Use search engine to search for \"Federico Lauria's 2014 dissertation\".\n2. Open the result from philarchive.org and open the PDF file for the full paper.\n3. Search for footnote 397 to find that the referenced work is Thomas Hobbes's \"Leviathan\".\n4. Use search engine to search for \"Smithsonian American Art Museum collection search\".\n5. Go to the museum's search webpage.\n6. Enter \"Hobbes Leviathan\" into the search box and submit the search.\n7. Open the two results, one by Jan Stussy (\"A free man...\") and one by Leon Karp (\"Hereby it is manifest...\").\n8. Verify from the full titles of these works that the titles are quotes from \"Leviathan\".\n9. Use search engine to search for \"Thomas Hobbes Leviathan full text\".\n10. Open any result that contains the full text, like the Project Gutenberg version.\n11. Search the text for the titles of each painting, using different substrings from the titles as needed to account for variations in spelling and punctuation.\n12. Find that the \"A free man...\" quote is from Chapter XXI (21) and that the \"Hereby it is manifest...\" quote is from Chapter XIII (13).\n13. Calculate the absolute difference of the chapter numbers: 21 - 13 = 8.",
            "Number of steps": "13",
            "How long did this take?": "7 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 82,
        "task_id": "d1af70ea-a9a4-421a-b9cc-94b5e02f1788",
        "Question": "As of the 2020 census, what was the population difference between the largest county seat and smallest county seat, by land area of the county seat, in Washington state? For population figures, please use the official data from data.census.gov. Please report the integer difference.",
        "answer": "736455",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "Step 1: Using a web browser, access a search engine and conduct a search, \"Washington cities by area\"\nStep 2: Navigate to the second search result, https://en.wikipedia.org/wiki/List_of_municipalities_in_Washington\nStep 3: Evaluate the page contents, finding the largest and smallest county seats by land area, Seattle and Cathlamet\nStep 4: Using a web browser, navigate to https://data.census.gov/\nStep 5: Using the website's search area, conduct a search, Seattle, Washington\nStep 6: Record the reported 2020 Decennial Census population of Seattle, Washington, 737,015\nStep 7: Using the website's search area, conduct a search, Cathlamet, Washington\nStep 8: Record the reported 2020 Decennial Census population of Cathlamet, Washington, 560\nStep 9: Using a calculator, find the difference in populations,\n\n737,015 - 560\n736,455\nStep 10: Report the correct answer to my user in the requested format, \"736,455\"",
            "Number of steps": "10",
            "How long did this take?": "5 minutes",
            "Tools": "1. A web browser\n2. A search engine\n3. A calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 85,
        "task_id": "08f3a05f-5947-4089-a4c4-d4bcfaa6b7a0",
        "Question": "Given $x_0 = -5$ and $f(x) = x^3 + 4x^2 - 3x + 8$, what is the smallest $n$ where using Newton's Method $n = n+1$ after rounding to four decimal places?",
        "answer": "2",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Verify Netwon's method as x_(n+1) = x_n - f(x_n)/f'(x_n) by searching\n2. Calculate the derivative: f'(x) = 3x^2 + 8x - 3\n3. Find x_1 using the given x_0 value: x_1 = -5 - ((-5)^3 + 4(-5)^2 - 3(-5) + 8)/(3(-5)^2 + 8(-5) - 3) = -79/16 ≈ -4.9375\n4. Iterate: x_2 = -79/16 - ((-79/16)^3 + 4(-79/16)^2 - 3(-79/16) + 8)/(3(-79/16)^2 + 8(-79/16) - 3) = -309711/62744 ≈ -4.9361\n5. They are not the same, so iterate: x_3 = -309711/62744 - ((-309711/62744)^3 + 4(-309711/62744)^2 - 3(-309711/62744) + 8)/(3(-309711/62744)^2 + 8(-309711/62744) - 3) = -18658881319456319/3780082116675876 ≈ -4.9361\n6. They are the same, so we stop and know n = 2 is the smallest value where this occurs.",
            "Number of steps": "6",
            "How long did this take?": "15 minutes",
            "Tools": "1. computer algebra system",
            "Number of tools": "1"
        }
    },
    {
        "id": 86,
        "task_id": "c714ab3a-da30-4603-bacd-d008800188b9",
        "Question": "You are Van Helsing, a renowned vampire hunter. A Count of Moldova, Lațcu IV, son of  Costea, has tasked you with investigating the village of Șirnea in neighboring Wallachia. The Count's advisors have reported that a vampire was spotted crossing the border near the village, and would like you to investigate it.\n\nYou travel to the village of Șirnea, and you begin your investigation. One night, just before dawn, you catch a glimpse of a man in a long black cape with red lining leaping from roof-top to roof-top with superhuman agility. It's a vampire! You try to chase the creature back to its home, but the creature is too fast. However, because of the remoteness of the village, you know with absolute certainty that the vampire must be a resident of the village. You decide that your best course of action will be to visit all 100 residents of the town during the day. You know something about vampires and humans that will make your investigation possible; humans always tell the truth, but vampires always lie.\n\nIn the afternoon, you go from house to house, speaking with all 100 residents of Șirnea. You ask everyone the same question: \"How many vampires are living in Șirnea\". Everyone in the village gives the same response, \"At least one of us is a human.\"\n\nHow many residents of Șirnea have been turned into vampires?",
        "answer": "100",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "Step 1: Evaluate the problem statement posed by my user.\nStep 2: Consider one known possible case: 1 Vampire, 99 humans\nStep 3: Step through the possible case with the answer provided by every resident \"At least one of us is a human.\"\nFor humans, who always tell the truth, the answer \"At least one of us is a human.\" is true for the known possible case\nFor the vampire, who always lies, the answer \"At least one of us is a human.\" is true, which violates the rule requiring the vampire to lie\nDiscount the case 1 Vampire, 99 Humans as possible\nStep 4: Consider the worst case: 100 Vampires, 0 Humans\nStep 5: Step through the worst case with the answer provided by every resident \"At least one of us is a human.\"\nFor humans, who always tell the truth, the answer \"At least one of us is a human.\" is false, but 0 humans provide this response, making this statement irrelevant\nFor the vampire, who always lies, the answer \"At least one of us is a human.\" is false, which respects the rule requiring vampires to lie\nConfirm the worst case as a provisional answer: 100 Vampires, 0 humans, answer: \"100\"\nStep 6: Consider a case with only one human: 99 Vampires, 1 Human\nStep 7: Step through the case with the answer provided by every resident \"At least one of us is a human.\"\nFor humans, who always tell the truth, the answer \"At least one of us is a human.\" is true\nFor the vampire, who always lies, the answer \"At least one of us is a human.\" is true, which violates the rule requiring vampires to lie\nDiscount the case of 99 Vampires, 1 Human as possible\nStep 8: Report the correct response to my user, \"100\"",
            "Number of steps": "8",
            "How long did this take?": "2 minutes",
            "Tools": "None",
            "Number of tools": "0"
        }
    },
    {
        "id": 89,
        "task_id": "ded28325-3447-4c56-860f-e497d6fb3577",
        "Question": "This is a secret message my friend gave me. It says where we should meet for our picnic on Friday. The only problem is, it’s encrypted in the Caesar cipher, so I can’t read it. Can you tell me what it says? This is the message:\n\nZsmxsm sc sx Zyvilsec Zvkjk.",
        "answer": "Picnic is in Ploybius Plaza.",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “Caesar cipher decrypt”.\n2. Click on top result, a decoding website.\n3. Enter the message into the text box.\n4. Click “DECRYPT (BRUTEFORCE)” to get all possible decryptions.\n5. Scroll through the results, noting that one possibility matches the user’s scenario of having a picnic.",
            "Number of steps": "5",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 91,
        "task_id": "e961a717-6b25-4175-8a68-874d28190ee4",
        "Question": "According to wikipedia, how many Asian countries still have a monarchy and access to the sea in 2021?",
        "answer": "12",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Search the internet for \"asian monarchies\"\n2. Navigate to from the search results \n3. Switch to the history tab\n4. Locate and navigate to a revision from 2021\n5. Open the articles for each listed monarchy in new tabs\n6. Verify access to the sea for each country using the provided maps and optionally Google Maps",
            "Number of steps": "6",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Computer vision\n3. Google Maps",
            "Number of tools": "4"
        }
    },
    {
        "id": 93,
        "task_id": "d700d50d-c707-4dca-90dc-4528cddd0c80",
        "Question": "Who composed the song that was performed by a rooster and a hamster in separate animated videos at separate tempos with different lyrics? Answer using the format First name Last name.",
        "answer": "Roger Miller",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"song performed by rooster and hamster\" on Google.\n2. Opened https://en.wikipedia.org/wiki/The_Hampsterdance_Song.\n3. Noted the song \"Whistle Stop\" was the original to use the tune.\n4. Followed the link to https://en.wikipedia.org/wiki/Robin_Hood_(1973_film).\n5. Found the composer of \"Whistle Stop\".",
            "Number of steps": "5",
            "How long did this take?": "5 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 95,
        "task_id": "851e570a-e3de-4d84-bcfa-cc85578baa59",
        "Question": "I thought we could try a fun word puzzle together :)\n\nI've got a Boggle board here:\n\nABRL\nEITE\nIONS\nFPEI\n\nI'd like to know the longest word that can be generated from the board. Please find the longest English language word that can be generated from this board. If more than one word of the same length exists at the maximum word length, please report the longest word that comes first, alphabetically. Oh, and I know that there might be different wordlists available for Boggle, so let's please just use the words_alpha dictionary found at https://github.com/dwyl/english-words as the dictionary for our game.",
        "answer": "Briniest",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "Step 1: Evaluate the user's request, storing the input Boggle board, \"ABRLEITEIONSFPEI\" and the specified dictionary location, https://github.com/dwyl/english-words\nStep 2: Using a web browser, access a search engine and conduct a search \"Boggle rules\"\nStep 3: Navigate to the first search result, https://en.wikipedia.org/wiki/Boggle\nStep 4: Evaluate the page content and store the game's rules:\n\n\"One player begins the game by shaking a covered tray of 16 cubic dice, each with a different letter printed on each of its sides. The dice settle into a 4×4 tray so that only the top letter of each cube is visible. After they have settled into the tray, a three-minute sand timer is started and all players simultaneously begin the main phase of play.[3]\n\nEach player searches for words that fit the following criteria:\n\nWords must be at least three letters in length.\nEach letter after the first must be a horizontal, vertical, or diagonal neighbor of the one before it.\nNo individual letter cube may be used more than once in a word.\nNo capitalized or hyphenated words are allowed.\nMultiple forms of the same word are allowed, such as singular/plural forms and other derivations. Each player records all the words they find by writing on a private sheet of paper. After three minutes have elapsed, all players must immediately stop writing and the game enters the scoring phase.\n\nIn this, each player reads off their list of discovered words. If two or more players wrote the same word, it is removed from all players' lists. Any player may challenge the validity of a word, in which case a previously nominated dictionary is used to verify or refute it. Once all duplicates and invalid words have been eliminated, points are awarded based on the length of each remaining word in a player's list. The winner is the player whose point total is highest, with any ties typically broken by a count of long words.\"\n\nStep 5: Using a web browser, navigate to the nominated dictionary specified by my user, https://github.com/dwyl/english-words\nStep 6: Navigate to the linked page, https://github.com/dwyl/english-words/blob/master/words_alpha.txt\nStep 7: Download the words_alpha.txt dictionary and save it to my file system as \"words_alpha.txt\"\nStep 8: Using a Python IDE, create a new project to solve the user's request as specified\nStep 9: Compose a Python program that accepts an input string and prints an output of all words that can be generated that match words in the nominated dictionary. The program must observe the rules discovered in Step 4. The output should be sorted so that strings are sorted alphabetically and grouped by character count:\n\nclass Boggle_Solver:\n    def __init__(self, file, size=4, points=None):\n        self.size = size\n        self.board = [[' '] * self.size for _ in range(self.size)]\n        self.adjacency = self.build_adjacency()\n        self.words, self.prefixes = self.load_dictionary(file)\n        \n    def adjacent(self, pos):\n        row, col = pos\n        adj = []\n        for i in [-1, 0, 1]:\n            for j in [-1, 0, 1]:\n                new_row = row + i\n                new_col = col + j\n                if 0 <= new_row < self.size and 0 <= new_col < self.size and not (i == j == 0):\n                    adj.append((new_row, new_col))\n        return adj\n\n    def build_adjacency(self):\n        adjacency = dict()\n        for row in range(0, self.size):\n            for col in range(0, self.size):\n                adjacency[(row, col)] = self.adjacent((row, col))\n        return adjacency\n\n    def load_dictionary(self, file):\n        words = set()\n        prefixes = set()\n        with open(file, 'r') as f:\n            next(f)\n            for line in f:\n                word = line.rstrip()\n                if len(word) >= 3:\n                    words.add(word)\n                    for i in range(len(word)):\n                        prefixes.add(word[:i])\n        return words, prefixes\n\n    def get_letter(self, pos):\n        return self.board[pos[0]][pos[1]]\n     \n    def set_board(self, letters):\n        board_input=letters.lower()\n        for row in range(self.size):\n            index = row * self.size\n            row_letters = board_input[index:index+self.size]\n            for col, letter in enumerate(row_letters):\n                self.board[row][col] = letter\n     \n    def find_words(self):\n        words = set()\n        for row in range(self.size):\n            for col in range(self.size):\n                words |= self.find_words_pos((row, col))\n        return sorted(words, key=lambda x: (-len(x), x))\n    \n    def find_words_pos(self, pos):\n        stack = [(n, [pos], self.get_letter(pos)) for n in self.adjacency[pos]]\n        words = set()\n        while stack:\n            curr, path, chars = stack.pop()\n            curr_char = self.get_letter(curr)\n            curr_chars = chars + curr_char\n\n            if curr_chars in self.words:\n                words.add(curr_chars)\n\n            if curr_chars in self.prefixes:\n                curr_adj = self.adjacency[curr]\n                stack.extend([(n, path + [curr], curr_chars) for n in curr_adj if n not in path])\n        return words\n\nif __name__ == '__main__':\n    word_list = Boggle_Solver('words_alpha.txt')\n    word_list.set_board('ABRLEITEIONSFPEI')\n    print(word_list.find_words())\n\nStep 10: Execute the program, and store the output:\n['briniest', 'brionies', 'inertiae', 'pointrel', 'aeonist', 'bretons', 'brinies', 'britons', 'enteria', 'entires', 'entoire', 'estonia', 'inertia', 'ioniser', 'iresine', 'iserine', 'nestler', 'oestrin', 'openest', 'penster', 'piotine', 'pointel', 'pointer', 'pointes', 'poitrel', 'sertion', 'sienite', 'sinopie', 'snirtle', 'triones', 'abrine', 'airest', 'bainie', 'baiter', 'bionts', 'birles', 'bitser', 'brents', 'breton', 'brines', 'brinie', 'briton', 'eirene', 'entire', 'entria', 'eserin', 'estrin', 'foiter', 'fontes', 'inerts', 'insert', 'instop', 'intire', 'ionise', 'ionist', 'nepote', 'nester', 'nestle', 'nirles', 'nitres', 'noires', 'opener', 'peiser', 'penest', 'peones', 'pester', 'pestle', 'pointe', 'points', 'ponies', 'pontes', 'potsie', 'resent', 'restio', 'seiner', 'sepion', 'sepone', 'serbia', 'serine', 'sinite', 'sinter', 'stenia', 'sterin', 'stoner', 'stopen', 'striae', 'teniae', 'terbia', 'tinsel', 'tonies', 'trines', 'abret', 'abrin', 'aeons', 'ainoi', 'airts', 'baits', 'bines', 'bints', 'biont', 'birle', 'biter', 'bites', 'brens', 'brent', 'brest', 'brine', 'brins', 'brite', 'brits', 'enter', 'entia', 'entre', 'erbia', 'ester', 'estop', 'estre', 'foins', 'fonts', 'ineri', 'inert', 'insep', 'inset', 'instr', 'intel', 'inter', 'irene', 'istle', 'lenes', 'lenis', 'lense', 'lento', 'neist', 'nerts', 'netop', 'niter', 'nitre', 'noire', 'noter', 'notes', 'notre', 'onset', 'opens', 'peine', 'peins', 'peise', 'penes', 'penis', 'pense', 'peons', 'peste', 'pions', 'piotr', 'point', 'poire', 'pones', 'poter', 'renes', 'rents', 'resin', 'retia', 'retie', 'retin', 'rinse', 'riots', 'rites', 'seine', 'senit', 'senti', 'serin', 'serio', 'seton', 'sinto', 'snirl', 'snirt', 'snite', 'steno', 'steri', 'stine', 'stion', 'stire', 'stoep', 'stone', 'stope', 'stria', 'tenia', 'tenio', 'tense', 'tines', 'tires', 'toner', 'tones', 'topes', 'tribe', 'trine', 'tsine', 'abie', 'abir', 'abit', 'abri', 'aeon', 'aine', 'ains', 'aint', 'aion', 'aire', 'airt', 'aits', 'bain', 'bait', 'bein', 'bine', 'bini', 'bino', 'bins', 'bint', 'bion', 'birl', 'birt', 'bite', 'bito', 'bits', 'bren', 'bret', 'brie', 'brin', 'brio', 'brit', 'eire', 'ense', 'entr', 'eons', 'eria', 'erie', 'erin', 'esne', 'eton', 'fiot', 'foes', 'foin', 'fone', 'fons', 'font', 'inia', 'init', 'inst', 'intl', 'into', 'intr', 'ione', 'ioni', 'ions', 'ires', 'isnt', 'itel', 'iten', 'iter', 'lene', 'leno', 'lens', 'lent', 'lese', 'lest', 'leto', 'lets', 'neri', 'nese', 'nest', 'neti', 'nets', 'nies', 'nist', 'nito', 'nits', 'noes', 'noir', 'nope', 'note', 'nots', 'oint', 'oner', 'ones', 'open', 'opes', 'pein', 'pens', 'pent', 'peon', 'pest', 'pion', 'pone', 'pons', 'pont', 'pote', 'poti', 'pots', 'reno', 'rent', 'rest', 'rets', 'ribe', 'rine', 'rins', 'riot', 'rite', 'selt', 'sent', 'sepn', 'serb', 'seri', 'sert', 'sine', 'snib', 'snit', 'snop', 'snot', 'sten', 'ster', 'stib', 'stir', 'stof', 'stop', 'stre', 'tens', 'teri', 'tine', 'tino', 'tins', 'tire', 'tirl', 'toea', 'toes', 'tone', 'tons', 'tope', 'topi', 'tres', 'trib', 'trin', 'trio', 'abe', 'abr', 'abt', 'ain', 'air', 'ait', 'bae', 'bai', 'bea', 'bin', 'bio', 'bit', 'brl', 'btl', 'eir', 'elt', 'ens', 'eof', 'eon', 'epi', 'ese', 'est', 'fie', 'fip', 'foe', 'fon', 'fop', 'fot', 'iba', 'ino', 'ins', 'int', 'iof', 'ion', 'ire', 'ise', 'isn', 'ist', 'ito', 'its', 'len', 'ler', 'les', 'let', 'ltr', 'nei', 'neo', 'nep', 'net', 'nib', 'nis', 'nit', 'not', 'oes', 'oie', 'oii', 'one', 'oni', 'ons', 'ont', 'ope', 'pen', 'pes', 'pie', 'poe', 'poi', 'pon', 'pot', 'rel', 'ren', 'res', 'ret', 'ria', 'rib', 'rie', 'rin', 'rio', 'rit', 'rle', 'rte', 'rti', 'sei', 'sel', 'sen', 'sep', 'ser', 'set', 'sie', 'sin', 'str', 'tel', 'ten', 'ter', 'tib', 'tie', 'tin', 'tlr', 'toe', 'toi', 'ton', 'top', 'tri', 'tsi']\n\nStep 11: Select the first word from the stored output as the correct response to my user's query, \"briniest\"\nStep 12: Report the correct answer to my user's query in the requested format, \"Briniest\"",
            "Number of steps": "12",
            "How long did this take?": "40 minutes",
            "Tools": "1. A file interface\n2. A Python IDE\n3. A web browser\n4. A search engine",
            "Number of tools": "4"
        }
    },
    {
        "id": 96,
        "task_id": "cabe07ed-9eca-40ea-8ead-410ef5e83f91",
        "Question": "What is the surname of the equine veterinarian mentioned in 1.E Exercises from the chemistry materials licensed by Marisa Alviar-Agnew & Henry Agnew under the CK-12 license in LibreText's Introductory Chemistry materials as compiled 08/21/2023?",
        "answer": "Louvrier",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search for \"1.E Exercises LibreText Introductory Chemistry\"\n2. Read to see the horse doctor mentioned.",
            "Number of steps": "2",
            "How long did this take?": "5 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 97,
        "task_id": "0a3cd321-3e76-4622-911b-0fda2e5d6b1a",
        "Question": "According to the World Bank, which countries had gross savings of over 35% of GDP for every year in the period 2001-2010? Give your answer as a comma-separated list of countries in alphabetical order. Use the countries most common names in english when answering.",
        "answer": "Brunei, China, Morocco, Singapore",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Use search engine to search for \"World Bank gross savings % of GDP\".\n2. Open World Bank data webpage showing gross savings as % of GDP (https://data.worldbank.org/indicator/NY.GNS.ICTR.ZS).\n3. Download data from webpage as Excel file and open it in a spreadsheet editor like Microsoft Excel.\n4. Go to the file's \"Data\" sheet.\n5. Add columns with formulas indicating if the gross savings % of GDP figures in each of the years from 2001 to 2010 are greater than 35 for each row.\n6. Add column computing AND of the boolean values from the previous step for each row.\n7. Filter for rows where the output of the AND from the previous step is true.\n8. Get the list of country names in the remaining rows, excluding non-country regions and categories.\n9. Sort the list alphabetically and format it as a comma-separated list to get the final answer: Brunei Darussalam, China, Morocco, Singapore",
            "Number of steps": "9",
            "How long did this take?": "12 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Spreadsheet editor",
            "Number of tools": "3"
        }
    },
    {
        "id": 98,
        "task_id": "f2feb6a4-363c-4c09-a804-0db564eafd68",
        "Question": "I’m thinking about selling my home, so I want to learn more about how homes in my area sold recently. I live in Pearl City, Hawaii, which is on the island of Oahu. I know two homes near me that sold in 2022 were 2072 Akaikai Loop, and 2017 Komo Mai Drive. Find which of those homes sold for more in 2022, and tell me how much it sold for. Don’t put commas or decimal places in the answer.",
        "answer": "900000",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “2072 akaikai loop pearl city hi”.\n2. Click Zillow result.\n3. Navigate to “Price and tax history”.\n4. Find the amount the house sold for when it was sold in 2022: $860,000.\n5. Search the web for “2017 komo mai drive pearl city hi”.\n6. Click Zillow result.\n7. Navigate to “Price and tax history”.\n8. Find the amount the house sold for when it was sold in 2022: $900,000.\n9. Express the higher amount in the specified format, $900000.",
            "Number of steps": "9",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 99,
        "task_id": "3cef3a44-215e-4aed-8e3b-b1e3f08063b7",
        "Question": "I'm making a grocery list for my mom, but she's a professor of botany and she's a real stickler when it comes to categorizing things. I need to add different foods to different categories on the grocery list, but if I make a mistake, she won't buy anything inserted in the wrong category. Here's the list I have so far:\n\nmilk, eggs, flour, whole bean coffee, Oreos, sweet potatoes, fresh basil, plums, green beans, rice, corn, bell pepper, whole allspice, acorns, broccoli, celery, zucchini, lettuce, peanuts\n\nI need to make headings for the fruits and vegetables. Could you please create a list of just the vegetables from my list? If you could do that, then I can figure out how to categorize the rest of the list into the appropriate categories. But remember that my mom is a real stickler, so make sure that no botanical fruits end up on the vegetable list, or she won't get them when she's at the store. Please alphabetize the list of vegetables, and place each item in a comma separated list.",
        "answer": "broccoli, celery, fresh basil, lettuce, sweet potatoes",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "Step 1: Evaluate the list provided by my user, eliminating objects which are neither fruits nor vegetables:\nsweet potatoes, fresh basil, plums, green beans, rice, corn, bell pepper, whole allspice, acorns, broccoli, celery, zucchini, lettuce, peanuts\nStep 2: Remove all items from the list which are botanical fruits, leaving a list of vegetables:\nsweet potatoes, fresh basil, broccoli, celery, lettuce\nStep 3: Alphabetize the remaining list as requested by my user:\nbroccoli, celery, fresh basil, lettuce, sweet potatoes\nStep 4: Provide the correct response in the requested format:\n\"broccoli\ncelery\nfresh basil\nlettuce\nsweet potatoes\"",
            "Number of steps": "4",
            "How long did this take?": "5 minutes",
            "Tools": "No tools required",
            "Number of tools": "0"
        }
    },
    {
        "id": 100,
        "task_id": "50f58759-7bd6-406f-9b0d-5692beb2a926",
        "Question": "How many times was a Twitter/X post cited as a reference on the english Wikipedia pages for each day of August in the last June 2023 versions of the pages?",
        "answer": "3",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"August Wikipedia\" on Google search.\n2. Opened the Wikipedia page for the month of August.\n3. Clicked on \"View history\" on the \"August 1\" page.\n4. Went back to the last edited version prior to July 2023.\n5. Checked the references for Twitter posts.\n6. Repeated the process for each day of August.\n7. Counted the Twitter posts found.",
            "Number of steps": "7",
            "How long did this take?": "8 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 101,
        "task_id": "0b260a57-3f3a-4405-9f29-6d7a1012dbfb",
        "Question": "On ScienceDirect, what is the difference to 3 decimal places in the sample standard deviations of the number of Reference Works in each Life Science domain compared to Health Sciences as of 2022?",
        "answer": "0.269",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"ScienceDirect\" on Google.\n2. Opened the ScienceDirect website.\n3. Clicked on the top listed domain in the Life Science section on the main page (Agricultural and Biological Sciences).\n4. Clicked on \"Reference works\" in the filters.\n5. Noted the number at the top.\n6. Subtracted the number that had 2023 or later as a date.\n7. Changed the domain to the following one and noted the number.\n8. Repeated step 6 for all Life Science domains.\n9. Calculated the sample standard deviation (16.195678435929).\n10. Went back to the home page.\n11. Repeated steps 3-9 for Health Science (15.926916420534).\n12. Subtracted 16.195678435929 - 15.926916420534.\n13. Rounded to the third decimal place.",
            "Number of steps": "13",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 102,
        "task_id": "ed58682d-bc52-4baa-9eb0-4eb81e1edacc",
        "Question": "What is the last word before the second chorus of the King of Pop's fifth single from his sixth studio album?",
        "answer": "stare",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Google searched \"King of Pop\".\n2. Clicked on Michael Jackson's Wikipedia.\n3. Scrolled down to \"Discography\".\n4. Clicked on the sixth album, \"Thriller\".\n5. Looked under \"Singles from Thriller\".\n6. Clicked on the fifth single, \"Human Nature\".\n7. Google searched \"Human Nature Michael Jackson Lyrics\".\n8. Looked at the opening result with full lyrics sourced by Musixmatch.\n9. Looked for repeating lyrics to determine the chorus.\n10. Determined the chorus begins with \"If they say\" and ends with \"Does he do me that way?\"\n11. Found the second instance of the chorus within the lyrics.\n12. Noted the last word before the second chorus - \"stare\".",
            "Number of steps": "12",
            "How long did this take?": "20 minutes",
            "Tools": "Web Browser",
            "Number of tools": "1"
        }
    },
    {
        "id": 110,
        "task_id": "d0633230-7067-47a9-9dbf-ee11e0a2cdd6",
        "Question": "In the Scikit-Learn July 2017 changelog, what other predictor base command received a bug fix? Just give the name, not a path.",
        "answer": "BaseLabelPropagation",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Scikit-Learn July 2017 changelog\" on Google.\n2. Opened \"Release History\" from the Scikit-Learn website.\n3. Clicked \"Other versions\" in the upper left.\n4. Opened the links, starting from the bottom, until one was found that included the \"July 2017\" changelog under the News.\n5. Looked for the \"Bug fixes\" section.\n6. Looked under \"Other predictors\" in that section.",
            "Number of steps": "6",
            "How long did this take?": "5 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 111,
        "task_id": "023e9d44-96ae-4eed-b912-244ee8c3b994",
        "Question": "It's May 2023, and I'm about to drive across the U.S. from California to Maine. I always recycle my water bottles at the end of a trip, and I drink 5 12-ounce water bottles for every 100 miles I travel, rounded to the nearest 100. Assuming I follow I-40 from Los Angeles to Cincinnati, then take I-90 from Cincinnati to Augusta, how many dollars will I get back according to Wikipedia?",
        "answer": "8",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Looked up the route from Los Angeles to Cincinnati on Google.\n2. Noted the miles (2,180 mi) and the states traveled.\n3. Looked up the route from Cincinnati to Augusta on Google.\n4. Noted the miles (1,035.4 mi) and the states traveled.\n5. Searched \"us bottle deposit\" on Google.\n6. Opened the \"Container deposit legislation in the United States\" page on Wikipedia.\n7. Clicked \"View history\" for the page.\n8. Opened the last version from May 2023.\n9. Found Maine's bottle deposit as of May 2023 (5 cents)\n10. Added the miles (2,180 + 1,035 = 3,215).\n11. Rounded the miles to the nearest 100 (3,200).\n12. Calculated the number of bottles (3,200 / 100 = 32, 32 * 5 = 160 bottles).\n13. Multiplied bottles by bottle deposit (160 * 5 = 800).\n14. Converted cents to dollars ($8).",
            "Number of steps": "14",
            "How long did this take?": "15 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 112,
        "task_id": "305ac316-eef6-4446-960a-92d80d542f82",
        "Question": "Who did the actor who played Ray in the Polish-language version of Everybody Loves Raymond play in Magda M.? Give only the first name.",
        "answer": "Wojciech",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search \"Polish-language version of Everybody Loves Raymond\" and pull up the Wiki page for Wszyscy kochają Romana.\n2. See that Bartłomiej Kasprzykowski is marked as playing Ray and go to his Wiki page.\n3. See that he is stated to have played Wojciech Płaska in Magda M.",
            "Number of steps": "3",
            "How long did this take?": "5 minutes",
            "Tools": "None",
            "Number of tools": "0"
        }
    },
    {
        "id": 117,
        "task_id": "65638e28-7f37-4fa7-b7b9-8c19bb609879",
        "Question": "The book with the doi 10.1353/book.24372 concerns a certain neurologist. According to chapter 2 of the book, what author influenced this neurologist’s belief in “endopsychic myths”? Give the last name only.",
        "answer": "Kleinpaul",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for 10.1353/book.24372.\n2. Click link to read the book.\n3. Click link for the second chapter.\n4. Ctrl-F for “endopsychic” to find a relevant passage.\n5. Read the passage to find the author the question is asking about, Kleinpaul.",
            "Number of steps": "5",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. PDF viewer",
            "Number of tools": "3"
        }
    },
    {
        "id": 118,
        "task_id": "3ff6b7a9-a5bd-4412-ad92-0cd0d45c0fee",
        "Question": "The longest-lived vertebrate is named after an island.  According to Wikipedia as of January 1, 2021, what is the 2020 estimated population of that island, to the nearest thousand?",
        "answer": "56000",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Do a web search for \"longest-lived vertebrate\"\n2. Find the answer, \"Greenland shark\"\n3. Find the Wikipedia entry for Greenland\n4. Look at the first revision dated January 1, 2021\n5. Find the 2020 population estimate, 56081\n6. Round to the nearest thousand, 56000",
            "Number of steps": "6",
            "How long did this take?": "30 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Access to Wikipedia\n4. Natural language processor",
            "Number of tools": "4"
        }
    },
    {
        "id": 120,
        "task_id": "708b99c5-e4a7-49cb-a5cf-933c8d46470d",
        "Question": "On the DeepFruits fruit detection graph on Connected Papers from 2016, what feature caused the largest bubble to be the size it is?",
        "answer": "Citations",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"connected papers deepfruits\" on Google search.\n2. Opened the \"DeepFruits: A Fruit Detection System Using Deep Neural Networks\" graph on ConnectedPapers.com.\n3. Clicked on the largest bubble (Redmon, 2015).\n4. Clicked on other bubbles to compare their features.\n5. Noted that Citations was the feature where the Redmon bubble exceeded all the others.",
            "Number of steps": "5",
            "How long did this take?": "7 minutes",
            "Tools": "1. Graph interaction tools\n2. Web browser\n3. Search engine",
            "Number of tools": "3"
        }
    },
    {
        "id": 121,
        "task_id": "0a65cb96-cb6e-4a6a-8aae-c1084f613456",
        "Question": "During the first week of August 2015, one of the NASA Astronomy Pictures of the Day shows the lights of a city on the horizon. The namesake of this city also has a landmark building in Chicago named after him. What is the name of the architectural firm that designed this landmark building? Give the first name appearing in the name of the firm as of June 2023.",
        "answer": "Holabird",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Use search engine to search for \"NASA Astronomy Pictures of the Day August 2015\".\n2. Navigate to the NASA Astronomy Picture of the Day Archive.\n3. Open the Astronomy Picture of the Day for 2015 August 1-7.\n4. Read the descriptions to check which picture shows the lights of a city on the horizon (2015 August 3) and note the name of the city (Marquette, Michigan, USA).\n5. Go to the Wikipedia article for Marquette, Michigan and note that the city was named after Jacques Marquette.\n6. Go to the Wikipedia article for Jacques Marquette and note that the Marquette Building in Chicago was named after him.\n7. Go to the Wikipedia page for the Marquette Building and verify that it is a Chicago landmark.\n8. Read the article and note that it was designed by architects Holabird & Roche.\n9. Go to the Wikipedia page for Holabird & Roche.\n10. Under \"View history\", select the latest version of the page revised during or before June 2023.\n11. Note that the name of the firm is Holabird & Root as of June 2023.",
            "Number of steps": "11",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 122,
        "task_id": "11af4e1a-5f45-467d-9aeb-46f4bb0bf034",
        "Question": "How many more blocks (also denoted as layers) in BERT base encoder than the encoder from the architecture proposed in Attention is All You Need?",
        "answer": "6",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search the internet for \"blocks in bert base\"\n2. Examine the search results page to locate the answer (12)\n3. Search the internet for \"attention is all you need layers\"\n4, Navigate to https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf from the search results page\n5. Examine the architecture section of the PDF to locate the answer (12)\n6. Calculate the difference between the two numbers",
            "Number of steps": "6",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 123,
        "task_id": "e142056d-56ab-4352-b091-b56054bd1359",
        "Question": "Bob was invited to participate in a game show, and he advanced to the final round. The final round offered Bob the chance to win a large sum by playing a game against the host. The host has 30 shiny prop coins, each of which is worth $1,000 if Bob manages to win them by playing the game. The host hides the coins in three different prize boxes and then shuffles their order. The only rule restricting the host's coin placement is that one box must contain at least 2 coins, and one box must contain 6 more coins than another box. In order to play, Bob must submit three guesses, one guess for the number of coins in each box. The box is then opened and the number of coins is revealed. If Bob's guess is a number greater than the number of coins in the box, Bob earns no coins. If Bob guesses a number equal to or less than the number of coins in the box, Bob wins a number of coins equal to his guess.\n\nIf Bob plays uses the optimal strategy, what's the minimum amount of money he can win from the game?",
        "answer": "16000",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "Step 1: Evaluate the problem statement provided by my user, storing the relevant information: \n30 coins with a value of $1,000 distributed between 3 boxes.\nEach box must contain at least 2 coins\nOne box must contain 6 more coins than another\n\nStep 2: Evaluate the base distribution: 2-8-20, noting that two boxes must contain at least 8 coins\n\nStep 3: Evaluate the most even allowable distribution: 8,8,14, noting that two boxes must contain at least 8 coins\n\nStep 4: Evaluate a case where Bob guesses 8 for each box in the outlier distributions.\nStep 5: For the worst case 2-8-20 distribution, Bob wins 0+8+8 = 16 coins\nStep 6: For the 8-8-14 distribution, Bob wins 8+8+8 = 24 coins\nStep 7: Convert the worst-case coin count to a prize value, 16*$1,000 = $16,000\nStep 8: Report the correct answer to my user: \"$16,000\"",
            "Number of steps": "8",
            "How long did this take?": "5 minutes",
            "Tools": "1. A calculator",
            "Number of tools": "1"
        }
    },
    {
        "id": 124,
        "task_id": "50ad0280-0819-4bd9-b275-5de32d3b5bcb",
        "Question": "Pull out the sentence in the following 5x7 block of text. Read from left to right and use all of the letters in order:\n\nTHESE\nAGULL\nGLIDE\nDPEAC\nEFULL\nYTOMY\nCHAIR",
        "answer": "The seagull glided peacefully to my chair.",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. I start with the first line, \"T H E S E\" and proceed to the next, \"A G U L L\". At this point, I am able to discern that \"A G U L L\" is probably meant to be \"A GULL\". However, I continue to read through the rest of the lines to get a sense of any other words that might jump out that would substantiate \"A GULL\" being accurate both semantically and syntactically. 2. So now I am on the last line and decide to work backwards. \"CHAIR\" is on the last line all by itself and this does seem a plausible fit as a full word rather than a fragment of another word. When I look to the line directly above \"Y T O M Y\", the word \"my\" jumps out and this is a natural accompaniment to the noun often used to indicate possession. \n3. Eliminating the \"MY\" at the end of \"Y T O MY\" leaves \"Y T O\" remaining in the line and I immediately recognize the preposition \"TO\". It is a this point I am fairly confident that \"TO MY CHAIR\" is most likely accurate. Given that there is only a \"Y\" left, I discern it is more than likely the end of a word located in the row above.\n4. I am now on the fifth row down and am looking at the letters \"E F U L L\" Attaching the \"Y\" left over from the sixth row below I see \"E F U L L Y\"  I recognize the word \"FULLY\" I know it can stand alone as an adverb or it can serve as a suffix to a larger adverb.\n5. Detaching the \"FULLY\", leaves the \"E\" alone on the line. Knowing it does not represent a word on its own in the English language, I look to attach it to the line above (row 4).\n6. The fourth row reads \"D P E A C\". Adding the \"E\" to the end, the first word I can separate out is \"ACE\". However \"ACEFULLY\" is not a word nor does \"ACE FULLY TO MY CHAIR\" make sense. When working my way left through the line, continuing to attach each letter as I go, I land on the \"P\" and am fairly confident that the word is \"PEACEFULLY\".\n7. Eliminating the \"PEAC\" from the row leaves me left with a \"D\". Now I look at the row above, row 3 and see that the row comprises the word \"GLIDE\" Adding the \"D\" to the end of the word would not only be permissible in terms of a displaying appropriate tense but it also makes sense as I add it to the fragment I have so far. I now can read \"GLIDED PEACEFULLY TO MY CHAIR\".\n8. Now, I am on the second line and if I were to read it from there on down it would read \"A GULL GLIDED PEACEFULLY TO MY CHAIR\".  While this reads well and makes sense semantically and syntactically on its own, it does not make sense when I add the first row. THESE A GULL GLIDED PEACEFULLY TO MY CHAIR.  So now I am left with the conclusion that  \"A GULL\" is not correct. Either it is part of a larger word or the letters need to be broken down further. At a quick glace, I can see that they don't make sense being broken down further so I leave \"GULL\" and add the \"A\" to the string above. Immediately my eye sees that \"A can be added to \"SE\" to make \"SEA\" and that the remaining\nletters spell the word \"THE\"  I now know the sentence reads \"The seagull glided peacefully to my chair.",
            "Number of steps": "8",
            "How long did this take?": "a few minutes at most",
            "Tools": "None",
            "Number of tools": "0"
        }
    },
    {
        "id": 125,
        "task_id": "65da0822-a48a-4a68-bbad-8ed1b835a834",
        "Question": "All of the individuals who formally held the position of United States secretary of homeland security prior to April 2019, excluding those who held the position in an acting capacity, have a bachelor's degree. Of the universities that these bachelor's degrees were from, which is the westernmost university and which is the easternmost university? Give them to me as a comma-separated list, I only want the name of the cities where the universities are located, with the westernmost city listed first.",
        "answer": "Santa Clara, Boston",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Go to the Wikipedia page for \"United States secretary of homeland security\".\n2. Open the Wikipedia pages for each person who held the position of United States secretary of homeland security in a non-acting capacity prior to April 2019.\n3. Using the infobox on each person's Wikipedia page, open the Wikipedia page for the university from which each person received a bachelor's degree (bachelor's degree indicated by AB, BA, or BS).\n4. Comparing the longitude coordinates for each university given on their Wikipedia pages, note that Santa Clara University is the westernmost as it has the highest longitude value in degrees W.\n5. Note that the easternmost is either Harvard University or University of Massachusetts Boston, but the longitude for Harvard University is expressed in degrees, minutes, and seconds (71°07′01″W) while the longitude for University of Massachusetts Boston is expressed in decimal degrees (71.038445°W), requiring conversion to determine which is further east.\n6. Convert 71°07′01″W to decimal degrees using the formula [decimal degrees] = [degrees] + [minutes] / 60 + [seconds] / 3600 to get approximately 71.1169°W for Harvard's longitude, which is further west than the University of Massachusetts Boston's longitude.\n7. Use determined westernmost and easternmost university names to produce the final answer: Santa Clara University, University of Massachusetts Boston",
            "Number of steps": "7",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web browser\n2. Calculator",
            "Number of tools": "2"
        }
    },
    {
        "id": 127,
        "task_id": "0bb3b44a-ede5-4db5-a520-4e844b0079c5",
        "Question": "Consider the following symbols: 𒐜  𒐐𒐚\n\nThis is a number written using the Mesopotamian/Babylonian number system and represented with Sumerian cuneiform. Convert this number into Arabic numerals as a decimal number.",
        "answer": "536",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Look up Babylonian number system (base 60, using uniform 'hashmarks' as counters)\n2. Converted the Cuniform to Arabic (8 56)\n3. Since Babylonian is a base 60 system, converted the \"60\"'s place to decimal (8*60=480)\n4. Added 56 to 480 (536).",
            "Number of steps": "4",
            "How long did this take?": "10 minutes",
            "Tools": "1. Bablyonian cuniform -> arabic legend",
            "Number of tools": "1"
        }
    },
    {
        "id": 128,
        "task_id": "7673d772-ef80-4f0f-a602-1bf4485c9b43",
        "Question": "On Cornell Law School website's legal information institute, under the fifth section of federal rules alphabetically, what word was deleted in the last amendment to the first rule in the article that has \"witnesses\" in the most titles as of 2021?",
        "answer": "inference",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Cornell Law School legal information institute\" on Google.\n2. Opened https://www.law.cornell.edu/.\n3. Clicked Get The Law > Federal Rules > Federal Rules of Evidence (fourth section down).\n4. Found the article that has \"witnesses\" in the most titles (VII).\n5. Opened the first rule (701).\n6. Scrolled to the last amendment as of 2021 (2011 amendment).\n7. Found the word that was deleted (inference).",
            "Number of steps": "7",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 130,
        "task_id": "c365c1c7-a3db-4d5e-a9a1-66f56eae7865",
        "Question": "Of the cities within the United States where U.S. presidents were born, which two are the farthest apart from the westernmost to the easternmost going east, giving the city names only? Give them to me in alphabetical order, in a comma-separated list",
        "answer": "Braintree, Honolulu",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"cities where us presidents are born\" on Google.\n2. Opened \"List of presidents of the United States by home state\" on Wikipedia.\n3. Searched the eastern cities to find the easternmost one (Braintree, MA).\n4. Checked the westernmost city (Honolulu, HI).",
            "Number of steps": "4",
            "How long did this take?": "8 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "3"
        }
    },
    {
        "id": 133,
        "task_id": "7d4a7d1d-cac6-44a8-96e8-ea9584a70825",
        "Question": "According to Girls Who Code, how long did it take in years for the percentage of computer scientists that were women to change by 13% from a starting point of 37%?",
        "answer": "22",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Girls Who Code\" on Google.\n2. Opened https://girlswhocode.com/.\n3. Clicked \"About Us\".\n4. Noted that the chart started at 37% and declined to 24%.\n5. Subtracted the marked years to find the number of years (2017 - 1995 = 22).",
            "Number of steps": "5",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 134,
        "task_id": "dc22a632-937f-4e6a-b72f-ba0ff3f5ff97",
        "Question": "What was the complete title of the book in which two James Beard Award winners recommended the restaurant where Ali Khan enjoyed a New Mexican staple in his cost-conscious TV show that started in 2015? Write the numbers in plain text if there are some in the title.",
        "answer": "Five Hundred Things To Eat Before It's Too Late: and the Very Best Places to Eat Them",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"Ali Khan New Mexico staple TV show\" on Google.\n2. Opened \"Albuquerque | Cheap Eats\" at https://www.cookingchanneltv.com/shows/cheap-eats/episodes/albuquerque.\n3. Noted the New Mexico staple and the list of restaurants.\n4. Searched \"Albuquerque Cheap Eats carne avodava\" on Google.\n5. Confirmed the restaurant name (Papa Felipe's) from the results.\n6. Searched \"James Beard Award winners Papa Felipe's\" on Google.\n7. Opened \"Papa Felipe's Mexican Restaurant - Albuquerque, New ...\" at https://www.nmgastronome.com/?p=4572.\n8. Clicked the link on the book title.\n9. Copied the full book title from Amazon.",
            "Number of steps": "9",
            "How long did this take?": "15 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 135,
        "task_id": "e2d69698-bc99-4e85-9880-67eaccd66e6c",
        "Question": "As of August 2023, who is the only winner of the US version of Survivor to be born in the month of May?",
        "answer": "Michele Fitzgerald",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Google \"American Survivor Winners\". Scroll down to the Wikipedia listing \"Survivor (American TV Series)\".\n    Search, https://en.wikipedia.org/wiki/Survivor_(American_TV_series),  \n2.I begin to make a list of all the Survivor winners and their seasons. \n3.I google \"survivor cast CBS\" and click on cast tab at cbs.com (https://www.cbs.com/shows/survivor/cast/). It features the players of the most recently aired season. I click on the Seasons tab and scroll down to the first season. I find the winner from the first season (based on my list compiled from the en.wikipedia.org site mentioned in step 1) and scroll through the bio information until I see the mention of their birthday. It is usually contained in the last sentence of the bio. I repeat this process until I get to Season 18. It is at this point that CBS starts to omit the full birthdays. For seasons 18 and 19 they include the month and date but omit the year. By Season 20, the birthday is omitted completely. \n4. So now I am making a simple template entry in google for each successive winner: When was (insert winner's name), winner of (insert season they won) of Survivor born?  There are usually two prominent sites I look for in my Google feed for this information:\n\n             1. Wikipedia page for that contestant: ex.: https://en.wikipedia.org/wiki/J._T._Thomas_(Survivor_contestant)\n             2. Survivor Wiki: ex.: https://survivor.fandom.com/wiki/J.T._Thomas   \n                Overall I have found the fan pages to be pretty reliable. If both options were available, I did take the opportunity to verify \n                that they matched up. I did not find any discrepancies (as far as birthdays) between the two.\n\n5. Now I have a list of all forty of the winners from the first forty seasons of Survivor (two of them have won twice). I comb the list and \nnote the months when they are mentioned and how many times that they appear. Michele Fitzgerald, the winner of Season 32 of Survivor, is the only listed with a birthday in May.",
            "Number of steps": "I have five main processes listed but the individual steps for each winner (and any confirmation searches) would place it into the 40-60 range.",
            "How long did this take?": "65 minutes",
            "Tools": "1. web browser\n2. search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 136,
        "task_id": "3f57289b-8c60-48be-bd80-01f8099ca449",
        "Question": "How many at bats did the Yankee with the most walks in the 1977 regular season have that same season?",
        "answer": "519",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search \"yankee stats\" to find their MLB stats page.\n2. Set the data to the 1977 regular season.\n3. Sort to find the most walks.\n4. See how many at bats the player had.",
            "Number of steps": "4",
            "How long did this take?": "5 minutes",
            "Tools": "1. web browser\n2. search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 138,
        "task_id": "23dd907f-1261-4488-b21c-e9185af91d5e",
        "Question": "In Audre Lorde’s poem “Father Son and Holy Ghost”, what is the number of the stanza in which some lines are indented?",
        "answer": "2",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “Audre Lorde Father Son and Holy Ghost”.\n2. Click on Poetry Foundation result.\n3. Note the stanza that appears to have lines indented, the second one.\n4. Return to search results to confirm.\n5. Click on second result.\n6. Confirm that the indentation appears in the second stanza here as well.",
            "Number of steps": "6",
            "How long did this take?": "5 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 139,
        "task_id": "42d4198c-5895-4f0a-b0c0-424a66465d83",
        "Question": "I'm curious about how much information is available for popular video games before their release. Find the Wikipedia page for the 2019 game that won the British Academy Games Awards. How many revisions did that page have before the month listed as the game's release date on that Wikipedia page (as of the most recent entry from 2022)?",
        "answer": "60",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for British Academy Video Games Award for Best Game 2019\n2. Find the answer, Outer Wilds\n3. Find the Wikipedia page for Outer Wilds\n4. Go to the last revision from 2022.\n5. Note the release date, May 29, 2019\n6. View the page history\n7. Count how many edits were made to the page before May 2019\n8. Arrive at the answer, 60",
            "Number of steps": "8",
            "How long did this take?": "30 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Access to Wikipedia\n4. Calculator or counting function",
            "Number of tools": "4"
        }
    },
    {
        "id": 141,
        "task_id": "a26649c6-1cb2-470a-871e-6910c64c3e53",
        "Question": "What is the absolute difference in tens of thousands between the population of chinstrap penguins on the Wikipedia page for penguin species populations as of the end of 2018 and the population recorded in the Nature.com \"global population assessment of the Chinstrap penguin\" article from 2020, assuming two penguins per breeding pair?",
        "answer": "116",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"penguin species populations wikipedia\" on Google search.\n2. Opened the \"List of Sphenisciformes by population\" Wikipedia article.\n3. Clicked \"View history\".\n4. Scrolled to the end of 2018 and opened the page.\n5. Scrolled to the encoding for the population table.\n6. Recorded the number of chinstrap penguins (8 million).\n7. Searched \"Nature.com global population assessment of the Chinstrap penguin 2020\" in Google search.\n8. Opened the top link to the article with the corresponding name and date.\n9. Read the abstract and noted the number of breeding pairs (3.42 million).\n10. Multiplied the breeding pairs by 2 to get the number of penguins (6.84 million).\n11. Subtracted the Wikipedia population from the Nature.com population (1.16 million).\n12. Multiplied 1.16 by 100 to get tens of thousands (116).",
            "Number of steps": "12",
            "How long did this take?": "20 minutes",
            "Tools": "1. Search engine\n2. Web browser\n3. Calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 145,
        "task_id": "9e1fc53b-46ff-49a1-9d05-9e6faac34cc5",
        "Question": "A 5-man group made up of one tank, one healer, and three DPS is doing a dungeon that was just released in World of Warcraft. Two are plate wearers and two are cloth wearers. At the final boss, both the tank and the healer are casting holy spells. Ice and fire are being used, each one by a different DPS. A bear from the group is attacking the boss. Metamorphosis is cast. The Kilt of the Forgotten One drops as loot, but no one can use it. If all classes were using their class abilities and all classes are unique, what are the five classes in the group in alphabetical order separated by commas?",
        "answer": "Death Knight, Hunter, Paladin, Priest, Warlock",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"WoW classes\" on Google.\n2. Opened \"https://worldofwarcraft.blizzard.com/en-us/game/classes\".\n3. Made an alphabetical list of all WoW classes: Death Knight, Demon Hunter, Druid, Evoker, Hunter, Mage, Monk, Paladin, Priest, Rogue, Shaman, Warlock, and Warrior.\n4. Opened each page and noted the armor type: Death Knight (plate), Demon Hunter (leather), Druid (leather), Evoker (mail), Hunter (mail), Mage (cloth), Monk (leather), Paladin (plate), Priest (cloth), Rogue (leather), Shaman (mail), Warlock (cloth), and Warrior (plate).\n5. Looked up \"Kilt of the Forgotten One\" on Google.\n6. Opened https://www.wowhead.com/wotlk/item=37616/kilt-of-the-forgotten-one.\n7. Noted that it is leather, and none of the classes can use it, so the remaining classes are: Death Knight (plate), Evoker (mail), Hunter (mail), Mage (cloth), Paladin (plate), Priest (cloth), Shaman (mail), Warlock (cloth), and Warrior (plate).\n8. Noted that it was added in Wrath of the Lich King, so if the dungeon is newly released, the era is the Wrath of the Lich King expansion.\n9. Searched \"Wrath of the Lich King class abilities\" on Google.\n10. Opened https://www.wowhead.com/wotlk/spells/abilities.\n11. Sorted by class and noted that Evokers, Demon Hunters, and Monks did not exist yet, so the remaining classes are: Death Knight (plate), Hunter (mail), Mage (cloth), Paladin (plate), Priest (cloth), Shaman (mail), Warlock (cloth), and Warrior (plate).\n12. Checked which classes use Holy school abilities, Paladin (plate) and Priest (cloth), so they must be in the group as tank and healer.\n13. Checked which classes use ice (Frost) and fire abilities, Death Knight (plate), Mage (cloth), Shaman (mail), and Warlock (cloth).\n14. There can only be one other plate class, so it must be Death Knight or Warrior, and one other cloth class, so it must be Mage or Warlock.\n15. Metamorphosis is a Warlock ability in Wrath of the Lich King, so it must be the other cloth class, and the group so far is Paladin, Priest, Warlock, plate DPS, and other DPS, with remaining options of Death Knight (plate), Hunter (mail), Mage (cloth), Shaman (mail), and Warrior (plate).\n16. There cannot be another cloth class, so the remaining options are Death Knight (plate), Hunter (mail), Shaman (mail), and Warrior (plate).\n17. There is a bear attacking the boss and there is no Druid to shapeshift into a bear, so it must be a Hunter's pet, making the group Paladin, Priest, Warlock, Hunter, and plate DPS, with remaining options of Death Knight (plate), Hunter (mail), Mage (cloth), Shaman (mail), and Warrior (plate).\n18. The last class is plate, leaving only Death Knight and Warrior.\n19. Hunters and Warlocks can both cast Fire abilities but cannot cast Frost abilities, so the last DPS must cast ice (Frost) abilities, making the last DPS a Frost Death Knight since Warriors have no Frost abilities.\n20. Order the group alphabetically: Death Knight, Hunter, Paladin, Priest, Warlock.",
            "Number of steps": "20",
            "How long did this take?": "20 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 146,
        "task_id": "840bfca7-4f7b-481a-8794-c560c340185d",
        "Question": "On June 6, 2023, an article by Carolyn Collins Petersen was published in Universe Today. This article mentions a team that produced a paper about their observations, linked at the bottom of the article. Find this paper. Under what NASA award number was the work performed by R. G. Arendt supported by?",
        "answer": "80GSFC21M0002",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Google \"June 6, 2023 Carolyn Collins Petersen Universe Today\"\n2. Find the relevant link to the scientific paper and follow that link\n3. Open the PDF. \n4. Search for NASA award number",
            "Number of steps": "4",
            "How long did this take?": "5 minutes",
            "Tools": "1. Web browser\n2. Search engine\n3. Access to academic journal websites",
            "Number of tools": "2"
        }
    },
    {
        "id": 147,
        "task_id": "1dcc160f-c187-48c2-b68e-319bd4354f3d",
        "Question": "According to Openreview.net, at the NeurIPS 2022 Conference, how many papers by an author named Yuri were accepted with a \"certain\" recommendation?",
        "answer": "3",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Went to openreview.net.\n2. Scroll down and clicked the \"All venues\" link.\n3. Clicked \"NeurIPS\".\n4. Opened the \"2022\" toggle menu.\n5. Clicked \"NeurIPS 2022 Conference\".\n6. Opened the top paper.\n7. Clicked \"Go to NeurIPS 2022 Conference homepage\".\n8. Searched \"Yuri\" in the search box.\n9. Opened each of the four papers and checked the Recommendation field.\n10. Counted the \"Certain\" recommendations.",
            "Number of steps": "8",
            "How long did this take?": "10 minutes",
            "Tools": "1. Web browser\n2. Search engine",
            "Number of tools": "2"
        }
    },
    {
        "id": 149,
        "task_id": "e0c10771-d627-4fd7-9694-05348e54ee36",
        "Question": "Take the gender split from the 2011 Bulgarian census about those who have completed tertiary education. Subtract the smaller number from the larger number, then return the difference in thousands of women. So if there were 30.1 thousand more men, you'd give \"30.1\"",
        "answer": "234.9",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Find the report put out by the Bulgarian on the 2011 census by searching.\n2. Find the requested data under the Educational Structure Section of the Report.\n3. 791.8 thousand women - 556.9 thousand men = 234.9 thousand women",
            "Number of steps": "3",
            "How long did this take?": "10 minutes",
            "Tools": "1. search engine\n2. pdf reader/extracter",
            "Number of tools": "2"
        }
    },
    {
        "id": 150,
        "task_id": "a0068077-79f4-461a-adfe-75c1a4148545",
        "Question": "What was the actual enrollment count of the clinical trial on H. pylori in acne vulgaris patients from Jan-May 2018 as listed on the NIH website?",
        "answer": "90",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"nih\" on Google search.\n2. Clicked the top link to nih.gov.\n3. Searched \"h pylori acne\" in the search box.\n4. Clicked \"More\" and selected \"Clinical Trials\".\n5. Clicked the result about H. Pylori and acne.\n6. Checked the date to confirm it was January to May 2018.\n7. Opened \"Tabular View\".\n8. Scrolled down to Actual Enrollment and recorded the number.",
            "Number of steps": "8",
            "How long did this take?": "8 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    },
    {
        "id": 151,
        "task_id": "e29834fd-413a-455c-a33e-c3915b07401c",
        "Question": "I'd like to learn more about some popular reality television competition shows. As of the end of the 44th season of the American version of Survivor, how many more unique winners have there been compared to the number of winners of American Idol?",
        "answer": "21",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "Step 1: Using a web browser, access a search engine and conduct a search \"American Survivor Television Series winners\"\nStep 2: Navigate to the first result, https://en.wikipedia.org/wiki/Survivor_(American_TV_series)\nStep 3: Evaluate the article and count the number of unique winners of the program: 42 winners\nStep 4: Navigate back to a search engine and conduct a search \"American Idol Winners\"\nStep 5: Navigate to the first search result, https://www.etonline.com/gallery/the-complete-list-of-american-idol-winners-21116/season-21-iam-tongi-92872\nStep 6: Evaluate the article and count the number of unique winners of the program: 21\nStep 7: Using a calculator, subtract the number of American Idol winners from the number of Survivor winners, 42-21 = 21\nStep 8: Report the correct response to my user, \"21\"",
            "Number of steps": "8",
            "How long did this take?": "5 minutes",
            "Tools": "1. A web browser\n2. A search engine\n3. A calculator",
            "Number of tools": "3"
        }
    },
    {
        "id": 152,
        "task_id": "bda648d7-d618-4883-88f4-3466eabd860e",
        "Question": "Where were the Vietnamese specimens described by Kuznetzov in Nedoshivina's 2010 paper eventually deposited? Just give me the city name without abbreviations.",
        "answer": "Saint Petersburg",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Search \"Kuznetzov Nedoshivina 2010\"\n2. Find the 2010 paper \"A catalogue of type specimens of the Tortricidae described by V. I. Kuznetzov from Vietnam and deposited in the Zoological Institute, St. Petersburg\"",
            "Number of steps": "2",
            "How long did this take?": "5 minutes",
            "Tools": "1. search engine",
            "Number of tools": "1"
        }
    },
    {
        "id": 153,
        "task_id": "50ec8903-b81f-4257-9450-1085afd2c319",
        "Question": "A standard Rubik’s cube has been broken into cubes making up its sides. The cubes are jumbled, and one is removed. There are 6 cubes with one colored face, 12 edge cubes with two colored faces, and 8 corner cubes with three colored faces. All blue cubes have been found. All cubes directly left, right, above, and below the orange center cube have been found, along with the center cube. The green corners have all been found, along with all green that borders yellow. For all orange cubes found, the opposite face’s cubes have been found. The removed cube has two colors on its faces. What are they? Answer using a comma separated list, with the colors ordered alphabetically.",
        "answer": "green, white",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Set up a standard Rubik's cube (red opposite orange, white opposite yellow, green opposite blue).\n2. Eliminated blue cubes, along with adjacent colors.\n3. Eliminated orange cubes, along with adjacent colors.\n4. Eliminated green corners and the green/yellow edge.\n5. Eliminated red, opposite of orange, cubes and adjacent colors.\n6. Identified the last possible two-face cube.",
            "Number of steps": "6",
            "How long did this take?": "10 minutes",
            "Tools": "1. Rubik's cube model",
            "Number of tools": "1"
        }
    },
    {
        "id": 154,
        "task_id": "cf106601-ab4f-4af9-b045-5295fe67b37d",
        "Question": "What country had the least number of athletes at the 1928 Summer Olympics? If there's a tie for a number of athletes, return the first in alphabetical order. Give the IOC country code as your answer.",
        "answer": "CUB",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Look up the 1928 Summer Olympics on Wikipedia\n2. Look at a table of athletes from countries.\n3. See that two countries had 1 and 2 athletes, so disregard those and choose the Cuba as CUB.",
            "Number of steps": "3",
            "How long did this take?": "5 minutes",
            "Tools": "None",
            "Number of tools": "0"
        }
    },
    {
        "id": 155,
        "task_id": "5f982798-16b9-4051-ab57-cfc7ebdb2a91",
        "Question": "I read a paper about multiwavelength observations of fast radio bursts back in March 2021 on Arxiv, and it had a fascinating diagram of an X-ray time profile. There was a similar burst-1 diagram in another paper from one of the same authors about fast radio bursts back in July 2020, but I can't recall what the difference in seconds in the measured time span was. How many more seconds did one measure than the other? Just give the number.",
        "answer": "0.2",
        "Level": 3,
        "Annotator_Metadata": {
            "Steps": "1. Searched \"arxiv\" on Google.\n2. Opened arXiv.\n3. Searched \"multiwavelength observations of fast radio bursts\" on arXiv.\n4. Scrolled down to March 2021.\n5. Opened the \"Multiwavelength observations of Fast Radio Bursts\" PDF in a new tab.\n6. Opened each author's name to find the one that had a July 2020 paper (Nicastro, L).\n7. Opened the \"The lowest frequency Fast Radio Bursts: Sardinia Radio Telescope detection of the periodic FRB 180916 at 328 MHz\" PDF.\n8. Searched \"time profile\" in the first paper.\n9. Noted the time span of the diagram (0.3 s).\n10. Searched \"burst-1 profile\" in the second paper.\n11. Noted the time span of the diagram (0.5 s).\n12. Subtracted the two (0.5 - 0.3 = 0.2 s).",
            "Number of steps": "12",
            "How long did this take?": "15 minutes",
            "Tools": "1. PDF access\n2. Calculator\n3. Web browser\n4. Search engine",
            "Number of tools": "4"
        }
    },
    {
        "id": 156,
        "task_id": "a0c07678-e491-4bbc-8f0b-07405144218f",
        "Question": "Who are the pitchers with the number before and after Taishō Tamai's number as of July 2023? Give them to me in the form Pitcher Before, Pitcher After, use their last names only, in Roman characters.",
        "answer": "Yoshida, Uehara",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Look up Taishō Tamai on Wikipedia\n2. See the pitcher with the number 18 (before) is Kōsei Yoshida and number 20 (after) is Kenta Uehara",
            "Number of steps": "2",
            "How long did this take?": "5 minutes",
            "Tools": "1. Wikipedia",
            "Number of tools": "1"
        }
    },
    {
        "id": 158,
        "task_id": "5a0c1adf-205e-4841-a666-7c3ef95def9d",
        "Question": "What is the first name of the only Malko Competition recipient from the 20th Century (after 1977) whose nationality on record is a country that no longer exists?",
        "answer": "Claus",
        "Level": 1,
        "Annotator_Metadata": {
            "Steps": "1. Look at the Malko Competition page on Wikipedia\n2. Scan the winners to see that the 1983 winner, Claus Peter Flor is stated to be from East Germany.",
            "Number of steps": "2",
            "How long did this take?": "5-10 minutes",
            "Tools": "None",
            "Number of tools": "0"
        }
    },
    {
        "id": 162,
        "task_id": "db4fd70a-2d37-40ea-873f-9433dc5e301f",
        "Question": "As of May 2023, how many stops are between South Station and Windsor Gardens on MBTA’s Franklin-Foxboro line (not included)?",
        "answer": "10",
        "Level": 2,
        "Annotator_Metadata": {
            "Steps": "1. Search the web for “MBTA Franklin Foxboro line”.\n2. Click on top result, on the MBTA website.\n3. Scroll down on the list of stops, and count the current stops between South Station and Windsor Gardens.\n4. Click the “Schedule & Maps” tab to view a map of the route.\n5. Examine the map to confirm that the order of stops is the same as on the listing of stops.\n6. Return to web search.\n7. Click on Wikipedia article for Franklin line.\n8. Read the article to check whether any stops were added or removed since the date given in the question.\n9. Search the web for “MBTA Franklin Foxboro Line changes”.\n10. Click News tab.\n11. Click article about rail schedule changes.\n12. Confirm that none of the changes affect the answer to the question.",
            "Number of steps": "12",
            "How long did this take?": "5-10 minutes",
            "Tools": "1. Search engine\n2. Web browser",
            "Number of tools": "2"
        }
    }
]
